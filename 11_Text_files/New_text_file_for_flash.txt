
*****************************************

Introducing the Atmeg644 a 40 pin version of the Atmega 328 with 64K of flash.

The UNO pcb plus Atmega328 loaded with the Arduino bootloader: A great combination for getting to grips with the C programming language and microcontrollers.

But what comes next, where do we progress to from there.  Entrance the 40 pin Atmega 644 with its massive 64Kb of flash and 2kB of EEPROM, the UNO programmer and Atmel Studio 7.

For many of us 64Kof flash is probably like playing table tennis on a football field.

But the extra IO could easily come in really useful.

The 328 has 23 IO lines some of which may be reserved for other things like a crystal or reset.

The 644 has 32 IO lines plus dedicated ports for reset and crystal.

It is surprising how quickly IO gets used up especially for keypads, user switches, displays, analogue inputs and outputs (one of these can consume up to 10 digital outputs).

28 of its IO lines could be used to drive a four digit 7 segment led display (at least in theory). A transistor may be required to buffer each of the IO lines. Alternatively some sort of multiplexing could be used to limit the current drain to an amount within the 644 capability. 

There are three steps in the migration from Arduino and the Atmega 328 to the 644.

The first is a programmer, the second is a compiler and the third is an evaluation pcb.

A programmer is introduced here.  It is an Arduino project that is uploaded to a UNO in the normal way.  It does not come with its own user interface, instead it uses a terminal program a number of which can be downloaded from the web.  Bray++ is the one recommended here.

For the compiler Atmel Studio 7 is recommended.  Its look and feel is very similar to that of the Arduino.  There are however two important differences.  On the plus side Studio 7 can compile projects for many AVR devices rather than just for the Atmega 328.  However on the minus side it does not appear come with an easy interface to bootloader code in the way that Arduino does.

The evaluation pcb can initially be as simple as piece of solder-less breadboard especially if the device is running off its internal RC clock.  Connection to a PC can easily be provided using an evaluation pcb for a USB to UART bridge.

A good one can be obtained from ebay by searching on "Micro-USB to UART TTL Module 6Pin Serial Converter CP2102 STC I6S3".  It can also act as a power supply rated up to several hundred mA at 3.3V. Having connected a module to a PC it seems to have no trouble automatically finding and installing its drivers from the web.

Having got this working how about migrating to the free Eagle pcb design tool.  Having mastered it everything is so much easier and quicker.  FTDI do a friendly USB bridge that can be hand soldered.  Remember though the eagle footprints are not necessarily suitable for hand soldering. Extra copper is required to transfer heat and solder from the iron to the pad.  Also remember that solder (especially lead free) is pretty toxic stuff.  Follow the safety advice!  

It is possible to program the flash with hex and text strings, the EEPROM with text and numeric data and also to program the configuration bytes.  The 64kB of flash will have plenty of space for storing all sorts of information about the project for example, what is its purpose, how to operate it and anything else that users might need to know about it. Three subroutines are provided that the user code can call upon to read text strings out of the flash.  The first counts the number of strings.  The second prints out any string requiring only its number and the third executes the lpm (load program memory) command that actually reads a location in flash.  Text is stored starting at location 7FFF and working towards location zero.  Hex is stored starting at location zero.

In addition to the Atmega 644, other Atmega devices can also be programmed.  Tests have been carried out with the 48, 88, 168 and 328 devices.