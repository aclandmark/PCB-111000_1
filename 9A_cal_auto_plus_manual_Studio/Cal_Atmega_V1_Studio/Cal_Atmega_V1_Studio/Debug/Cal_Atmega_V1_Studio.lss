
Cal_Atmega_V1_Studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000192  00800100  00001288  0000131c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001288  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e1  00800292  00800292  000014ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000014ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000014e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00001520  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018fc  00000000  00000000  00001670  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000877  00000000  00000000  00002f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e9a  00000000  00000000  000037e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000470  00000000  00000000  00004680  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000755  00000000  00000000  00004af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001151  00000000  00000000  00005245  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00006396  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 3d 08 	jmp	0x107a	; 0x107a <__vector_9>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <__vector_13>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 e8       	ldi	r30, 0x88	; 136
      7c:	f2 e1       	ldi	r31, 0x12	; 18
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 39       	cpi	r26, 0x92	; 146
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	23 e0       	ldi	r18, 0x03	; 3
      8c:	a2 e9       	ldi	r26, 0x92	; 146
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a3 37       	cpi	r26, 0x73	; 115
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 a0 05 	call	0xb40	; 0xb40 <main>
      9e:	0c 94 42 09 	jmp	0x1284	; 0x1284 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART_init_32>:



/*********************************************************************/
void Timer_T0_10mS_delay_x_m(int m)
{for (int n = 0; n < m; n++){Timer_T0_sub(T0_delay_10ms);}}
      a6:	e1 ec       	ldi	r30, 0xC1	; 193
      a8:	f0 e0       	ldi	r31, 0x00	; 0
      aa:	10 82       	st	Z, r1
      ac:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
      b0:	60 93 c4 00 	sts	0x00C4, r22	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
      b4:	82 e0       	ldi	r24, 0x02	; 2
      b6:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
      ba:	88 e1       	ldi	r24, 0x18	; 24
      bc:	80 83       	st	Z, r24
      be:	86 e8       	ldi	r24, 0x86	; 134
      c0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
      c4:	08 95       	ret

000000c6 <waitforkeypress>:
      c6:	e0 ec       	ldi	r30, 0xC0	; 192
      c8:	f0 e0       	ldi	r31, 0x00	; 0
      ca:	80 81       	ld	r24, Z
      cc:	88 23       	and	r24, r24
      ce:	ec f7       	brge	.-6      	; 0xca <waitforkeypress+0x4>
      d0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
      d4:	08 95       	ret

000000d6 <isCharavailable>:
      d6:	20 e0       	ldi	r18, 0x00	; 0
      d8:	30 e0       	ldi	r19, 0x00	; 0
      da:	e0 ec       	ldi	r30, 0xC0	; 192
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	0b c0       	rjmp	.+22     	; 0xf6 <isCharavailable+0x20>
      e0:	2f 5f       	subi	r18, 0xFF	; 255
      e2:	3f 4f       	sbci	r19, 0xFF	; 255
      e4:	21 34       	cpi	r18, 0x41	; 65
      e6:	9f e1       	ldi	r25, 0x1F	; 31
      e8:	39 07       	cpc	r19, r25
      ea:	1c f0       	brlt	.+6      	; 0xf2 <isCharavailable+0x1c>
      ec:	81 50       	subi	r24, 0x01	; 1
      ee:	20 e0       	ldi	r18, 0x00	; 0
      f0:	30 e0       	ldi	r19, 0x00	; 0
      f2:	88 23       	and	r24, r24
      f4:	29 f0       	breq	.+10     	; 0x100 <isCharavailable+0x2a>
      f6:	90 81       	ld	r25, Z
      f8:	99 23       	and	r25, r25
      fa:	94 f7       	brge	.-28     	; 0xe0 <isCharavailable+0xa>
      fc:	81 e0       	ldi	r24, 0x01	; 1
      fe:	08 95       	ret
     100:	80 e0       	ldi	r24, 0x00	; 0
     102:	08 95       	ret

00000104 <wait_for_return_key>:
     104:	0e 94 63 00 	call	0xc6	; 0xc6 <waitforkeypress>
     108:	8d 30       	cpi	r24, 0x0D	; 13
     10a:	11 f0       	breq	.+4      	; 0x110 <wait_for_return_key+0xc>
     10c:	8a 30       	cpi	r24, 0x0A	; 10
     10e:	51 f4       	brne	.+20     	; 0x124 <wait_for_return_key+0x20>
     110:	81 e0       	ldi	r24, 0x01	; 1
     112:	0e 94 6b 00 	call	0xd6	; 0xd6 <isCharavailable>
     116:	88 23       	and	r24, r24
     118:	21 f0       	breq	.+8      	; 0x122 <wait_for_return_key+0x1e>
     11a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     11e:	8d e0       	ldi	r24, 0x0D	; 13
     120:	08 95       	ret
     122:	8d e0       	ldi	r24, 0x0D	; 13
     124:	08 95       	ret

00000126 <sendChar>:
     126:	e0 ec       	ldi	r30, 0xC0	; 192
     128:	f0 e0       	ldi	r31, 0x00	; 0
     12a:	90 81       	ld	r25, Z
     12c:	95 ff       	sbrs	r25, 5
     12e:	fd cf       	rjmp	.-6      	; 0x12a <sendChar+0x4>
     130:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     134:	08 95       	ret

00000136 <sendString>:
     136:	0f 93       	push	r16
     138:	1f 93       	push	r17
     13a:	cf 93       	push	r28
     13c:	df 93       	push	r29
     13e:	fc 01       	movw	r30, r24
     140:	80 81       	ld	r24, Z
     142:	81 11       	cpse	r24, r1
     144:	0a c0       	rjmp	.+20     	; 0x15a <sendString+0x24>
     146:	11 c0       	rjmp	.+34     	; 0x16a <sendString+0x34>
     148:	89 91       	ld	r24, Y+
     14a:	88 23       	and	r24, r24
     14c:	71 f0       	breq	.+28     	; 0x16a <sendString+0x34>
     14e:	0e 94 93 00 	call	0x126	; 0x126 <sendChar>
     152:	0c 17       	cp	r16, r28
     154:	1d 07       	cpc	r17, r29
     156:	c1 f7       	brne	.-16     	; 0x148 <sendString+0x12>
     158:	08 c0       	rjmp	.+16     	; 0x16a <sendString+0x34>
     15a:	8f 01       	movw	r16, r30
     15c:	0e 94 93 00 	call	0x126	; 0x126 <sendChar>
     160:	e8 01       	movw	r28, r16
     162:	21 96       	adiw	r28, 0x01	; 1
     164:	08 53       	subi	r16, 0x38	; 56
     166:	1f 4f       	sbci	r17, 0xFF	; 255
     168:	ef cf       	rjmp	.-34     	; 0x148 <sendString+0x12>
     16a:	df 91       	pop	r29
     16c:	cf 91       	pop	r28
     16e:	1f 91       	pop	r17
     170:	0f 91       	pop	r16
     172:	08 95       	ret

00000174 <newline>:
     174:	8f e8       	ldi	r24, 0x8F	; 143
     176:	92 e0       	ldi	r25, 0x02	; 2
     178:	0e 94 9b 00 	call	0x136	; 0x136 <sendString>
     17c:	08 95       	ret

0000017e <SBtoAL>:
     17e:	2f 92       	push	r2
     180:	3f 92       	push	r3
     182:	4f 92       	push	r4
     184:	5f 92       	push	r5
     186:	6f 92       	push	r6
     188:	7f 92       	push	r7
     18a:	8f 92       	push	r8
     18c:	9f 92       	push	r9
     18e:	af 92       	push	r10
     190:	bf 92       	push	r11
     192:	cf 92       	push	r12
     194:	df 92       	push	r13
     196:	ef 92       	push	r14
     198:	ff 92       	push	r15
     19a:	0f 93       	push	r16
     19c:	1f 93       	push	r17
     19e:	cf 93       	push	r28
     1a0:	df 93       	push	r29
     1a2:	1c 01       	movw	r2, r24
     1a4:	2a 01       	movw	r4, r20
     1a6:	3b 01       	movw	r6, r22
     1a8:	41 15       	cp	r20, r1
     1aa:	51 05       	cpc	r21, r1
     1ac:	61 05       	cpc	r22, r1
     1ae:	70 48       	sbci	r23, 0x80	; 128
     1b0:	61 f5       	brne	.+88     	; 0x20a <SBtoAL+0x8c>
     1b2:	2a 30       	cpi	r18, 0x0A	; 10
     1b4:	19 f0       	breq	.+6      	; 0x1bc <SBtoAL+0x3e>
     1b6:	20 31       	cpi	r18, 0x10	; 16
     1b8:	b9 f0       	breq	.+46     	; 0x1e8 <SBtoAL+0x6a>
     1ba:	65 c0       	rjmp	.+202    	; 0x286 <SBtoAL+0x108>
     1bc:	98 e3       	ldi	r25, 0x38	; 56
     1be:	f1 01       	movw	r30, r2
     1c0:	90 83       	st	Z, r25
     1c2:	84 e3       	ldi	r24, 0x34	; 52
     1c4:	81 83       	std	Z+1, r24	; 0x01
     1c6:	26 e3       	ldi	r18, 0x36	; 54
     1c8:	22 83       	std	Z+2, r18	; 0x02
     1ca:	23 e3       	ldi	r18, 0x33	; 51
     1cc:	23 83       	std	Z+3, r18	; 0x03
     1ce:	94 83       	std	Z+4, r25	; 0x04
     1d0:	85 83       	std	Z+5, r24	; 0x05
     1d2:	97 e3       	ldi	r25, 0x37	; 55
     1d4:	96 83       	std	Z+6, r25	; 0x06
     1d6:	87 83       	std	Z+7, r24	; 0x07
     1d8:	81 e3       	ldi	r24, 0x31	; 49
     1da:	80 87       	std	Z+8, r24	; 0x08
     1dc:	82 e3       	ldi	r24, 0x32	; 50
     1de:	81 87       	std	Z+9, r24	; 0x09
     1e0:	8d e2       	ldi	r24, 0x2D	; 45
     1e2:	82 87       	std	Z+10, r24	; 0x0a
     1e4:	13 86       	std	Z+11, r1	; 0x0b
     1e6:	4f c0       	rjmp	.+158    	; 0x286 <SBtoAL+0x108>
     1e8:	80 e3       	ldi	r24, 0x30	; 48
     1ea:	f1 01       	movw	r30, r2
     1ec:	80 83       	st	Z, r24
     1ee:	81 83       	std	Z+1, r24	; 0x01
     1f0:	82 83       	std	Z+2, r24	; 0x02
     1f2:	83 83       	std	Z+3, r24	; 0x03
     1f4:	84 83       	std	Z+4, r24	; 0x04
     1f6:	85 83       	std	Z+5, r24	; 0x05
     1f8:	86 83       	std	Z+6, r24	; 0x06
     1fa:	88 e3       	ldi	r24, 0x38	; 56
     1fc:	87 83       	std	Z+7, r24	; 0x07
     1fe:	8d e2       	ldi	r24, 0x2D	; 45
     200:	80 87       	std	Z+8, r24	; 0x08
     202:	11 86       	std	Z+9, r1	; 0x09
     204:	12 86       	std	Z+10, r1	; 0x0a
     206:	13 86       	std	Z+11, r1	; 0x0b
     208:	3e c0       	rjmp	.+124    	; 0x286 <SBtoAL+0x108>
     20a:	e1 01       	movw	r28, r2
     20c:	c1 01       	movw	r24, r2
     20e:	0c 96       	adiw	r24, 0x0c	; 12
     210:	f1 01       	movw	r30, r2
     212:	11 92       	st	Z+, r1
     214:	e8 17       	cp	r30, r24
     216:	f9 07       	cpc	r31, r25
     218:	e1 f7       	brne	.-8      	; 0x212 <SBtoAL+0x94>
     21a:	73 01       	movw	r14, r6
     21c:	62 01       	movw	r12, r4
     21e:	77 20       	and	r7, r7
     220:	3c f4       	brge	.+14     	; 0x230 <SBtoAL+0xb2>
     222:	cc 24       	eor	r12, r12
     224:	dd 24       	eor	r13, r13
     226:	76 01       	movw	r14, r12
     228:	c4 18       	sub	r12, r4
     22a:	d5 08       	sbc	r13, r5
     22c:	e6 08       	sbc	r14, r6
     22e:	f7 08       	sbc	r15, r7
     230:	00 e0       	ldi	r16, 0x00	; 0
     232:	10 e0       	ldi	r17, 0x00	; 0
     234:	82 2e       	mov	r8, r18
     236:	91 2c       	mov	r9, r1
     238:	a1 2c       	mov	r10, r1
     23a:	b1 2c       	mov	r11, r1
     23c:	c7 01       	movw	r24, r14
     23e:	b6 01       	movw	r22, r12
     240:	a5 01       	movw	r20, r10
     242:	94 01       	movw	r18, r8
     244:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__divmodsi4>
     248:	68 83       	st	Y, r22
     24a:	6a 30       	cpi	r22, 0x0A	; 10
     24c:	18 f4       	brcc	.+6      	; 0x254 <SBtoAL+0xd6>
     24e:	60 5d       	subi	r22, 0xD0	; 208
     250:	68 83       	st	Y, r22
     252:	02 c0       	rjmp	.+4      	; 0x258 <SBtoAL+0xda>
     254:	69 5c       	subi	r22, 0xC9	; 201
     256:	68 83       	st	Y, r22
     258:	0f 5f       	subi	r16, 0xFF	; 255
     25a:	1f 4f       	sbci	r17, 0xFF	; 255
     25c:	c7 01       	movw	r24, r14
     25e:	b6 01       	movw	r22, r12
     260:	a5 01       	movw	r20, r10
     262:	94 01       	movw	r18, r8
     264:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__divmodsi4>
     268:	69 01       	movw	r12, r18
     26a:	7a 01       	movw	r14, r20
     26c:	21 96       	adiw	r28, 0x01	; 1
     26e:	12 16       	cp	r1, r18
     270:	13 06       	cpc	r1, r19
     272:	14 06       	cpc	r1, r20
     274:	15 06       	cpc	r1, r21
     276:	14 f3       	brlt	.-60     	; 0x23c <SBtoAL+0xbe>
     278:	77 20       	and	r7, r7
     27a:	2c f4       	brge	.+10     	; 0x286 <SBtoAL+0x108>
     27c:	f1 01       	movw	r30, r2
     27e:	e0 0f       	add	r30, r16
     280:	f1 1f       	adc	r31, r17
     282:	8d e2       	ldi	r24, 0x2D	; 45
     284:	80 83       	st	Z, r24
     286:	df 91       	pop	r29
     288:	cf 91       	pop	r28
     28a:	1f 91       	pop	r17
     28c:	0f 91       	pop	r16
     28e:	ff 90       	pop	r15
     290:	ef 90       	pop	r14
     292:	df 90       	pop	r13
     294:	cf 90       	pop	r12
     296:	bf 90       	pop	r11
     298:	af 90       	pop	r10
     29a:	9f 90       	pop	r9
     29c:	8f 90       	pop	r8
     29e:	7f 90       	pop	r7
     2a0:	6f 90       	pop	r6
     2a2:	5f 90       	pop	r5
     2a4:	4f 90       	pop	r4
     2a6:	3f 90       	pop	r3
     2a8:	2f 90       	pop	r2
     2aa:	08 95       	ret

000002ac <NumericString_to_PC>:
     2ac:	0f 93       	push	r16
     2ae:	1f 93       	push	r17
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	fc 01       	movw	r30, r24
     2b6:	20 81       	ld	r18, Z
     2b8:	22 23       	and	r18, r18
     2ba:	99 f0       	breq	.+38     	; 0x2e2 <NumericString_to_PC+0x36>
     2bc:	31 96       	adiw	r30, 0x01	; 1
     2be:	c0 e0       	ldi	r28, 0x00	; 0
     2c0:	d0 e0       	ldi	r29, 0x00	; 0
     2c2:	21 96       	adiw	r28, 0x01	; 1
     2c4:	21 91       	ld	r18, Z+
     2c6:	21 11       	cpse	r18, r1
     2c8:	fc cf       	rjmp	.-8      	; 0x2c2 <NumericString_to_PC+0x16>
     2ca:	20 97       	sbiw	r28, 0x00	; 0
     2cc:	51 f0       	breq	.+20     	; 0x2e2 <NumericString_to_PC+0x36>
     2ce:	8c 01       	movw	r16, r24
     2d0:	0c 0f       	add	r16, r28
     2d2:	1d 1f       	adc	r17, r29
     2d4:	f8 01       	movw	r30, r16
     2d6:	82 91       	ld	r24, -Z
     2d8:	8f 01       	movw	r16, r30
     2da:	0e 94 93 00 	call	0x126	; 0x126 <sendChar>
     2de:	21 97       	sbiw	r28, 0x01	; 1
     2e0:	c9 f7       	brne	.-14     	; 0x2d4 <NumericString_to_PC+0x28>
     2e2:	df 91       	pop	r29
     2e4:	cf 91       	pop	r28
     2e6:	1f 91       	pop	r17
     2e8:	0f 91       	pop	r16
     2ea:	08 95       	ret

000002ec <Num_to_PC>:
     2ec:	cf 93       	push	r28
     2ee:	df 93       	push	r29
     2f0:	cd b7       	in	r28, 0x3d	; 61
     2f2:	de b7       	in	r29, 0x3e	; 62
     2f4:	2c 97       	sbiw	r28, 0x0c	; 12
     2f6:	0f b6       	in	r0, 0x3f	; 63
     2f8:	f8 94       	cli
     2fa:	de bf       	out	0x3e, r29	; 62
     2fc:	0f be       	out	0x3f, r0	; 63
     2fe:	cd bf       	out	0x3d, r28	; 61
     300:	28 2f       	mov	r18, r24
     302:	ce 01       	movw	r24, r28
     304:	01 96       	adiw	r24, 0x01	; 1
     306:	0e 94 bf 00 	call	0x17e	; 0x17e <SBtoAL>
     30a:	ce 01       	movw	r24, r28
     30c:	01 96       	adiw	r24, 0x01	; 1
     30e:	0e 94 56 01 	call	0x2ac	; 0x2ac <NumericString_to_PC>
     312:	2c 96       	adiw	r28, 0x0c	; 12
     314:	0f b6       	in	r0, 0x3f	; 63
     316:	f8 94       	cli
     318:	de bf       	out	0x3e, r29	; 62
     31a:	0f be       	out	0x3f, r0	; 63
     31c:	cd bf       	out	0x3d, r28	; 61
     31e:	df 91       	pop	r29
     320:	cf 91       	pop	r28
     322:	08 95       	ret

00000324 <decimal_digit_or_x>:
     324:	90 ed       	ldi	r25, 0xD0	; 208
     326:	98 0f       	add	r25, r24
     328:	9a 30       	cpi	r25, 0x0A	; 10
     32a:	28 f0       	brcs	.+10     	; 0x336 <decimal_digit_or_x+0x12>
     32c:	91 e0       	ldi	r25, 0x01	; 1
     32e:	88 37       	cpi	r24, 0x78	; 120
     330:	19 f0       	breq	.+6      	; 0x338 <decimal_digit_or_x+0x14>
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	01 c0       	rjmp	.+2      	; 0x338 <decimal_digit_or_x+0x14>
     336:	91 e0       	ldi	r25, 0x01	; 1
     338:	89 2f       	mov	r24, r25
     33a:	08 95       	ret

0000033c <UC_from_KBD>:
     33c:	cf 93       	push	r28
     33e:	df 93       	push	r29
     340:	0e 94 63 00 	call	0xc6	; 0xc6 <waitforkeypress>
     344:	c8 2f       	mov	r28, r24
     346:	0e 94 92 01 	call	0x324	; 0x324 <decimal_digit_or_x>
     34a:	88 23       	and	r24, r24
     34c:	c9 f3       	breq	.-14     	; 0x340 <UC_from_KBD+0x4>
     34e:	c8 37       	cpi	r28, 0x78	; 120
     350:	b9 f0       	breq	.+46     	; 0x380 <UC_from_KBD+0x44>
     352:	0e 94 ba 00 	call	0x174	; 0x174 <newline>
     356:	8c 2f       	mov	r24, r28
     358:	0e 94 93 00 	call	0x126	; 0x126 <sendChar>
     35c:	c0 53       	subi	r28, 0x30	; 48
     35e:	0e 94 82 00 	call	0x104	; 0x104 <wait_for_return_key>
     362:	8d 30       	cpi	r24, 0x0D	; 13
     364:	79 f0       	breq	.+30     	; 0x384 <UC_from_KBD+0x48>
     366:	d0 ed       	ldi	r29, 0xD0	; 208
     368:	d8 0f       	add	r29, r24
     36a:	da 30       	cpi	r29, 0x0A	; 10
     36c:	c0 f7       	brcc	.-16     	; 0x35e <UC_from_KBD+0x22>
     36e:	0e 94 93 00 	call	0x126	; 0x126 <sendChar>
     372:	cc 0f       	add	r28, r28
     374:	8c 2f       	mov	r24, r28
     376:	88 0f       	add	r24, r24
     378:	88 0f       	add	r24, r24
     37a:	c8 0f       	add	r28, r24
     37c:	cd 0f       	add	r28, r29
     37e:	ef cf       	rjmp	.-34     	; 0x35e <UC_from_KBD+0x22>
     380:	88 e7       	ldi	r24, 0x78	; 120
     382:	01 c0       	rjmp	.+2      	; 0x386 <UC_from_KBD+0x4a>
     384:	8c 2f       	mov	r24, r28
     386:	df 91       	pop	r29
     388:	cf 91       	pop	r28
     38a:	08 95       	ret

0000038c <Timer_T0_sub>:
     38c:	66 bd       	out	0x26, r22	; 38
     38e:	85 bd       	out	0x25, r24	; 37
     390:	a8 9b       	sbis	0x15, 0	; 21
     392:	fe cf       	rjmp	.-4      	; 0x390 <Timer_T0_sub+0x4>
     394:	a8 9a       	sbi	0x15, 0	; 21
     396:	15 bc       	out	0x25, r1	; 37
     398:	08 95       	ret

0000039a <Timer_T1_sub>:



/*********************************************************************/
void Timer_T1_sub(char Counter_speed, unsigned int Start_point){ 
TCNT1H = (Start_point >> 8);
     39a:	70 93 85 00 	sts	0x0085, r23	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
TCNT1L = Start_point & 0x00FF;
     39e:	60 93 84 00 	sts	0x0084, r22	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
TIFR1 = 0xFF;
     3a2:	9f ef       	ldi	r25, 0xFF	; 255
     3a4:	96 bb       	out	0x16, r25	; 22
TCCR1B = Counter_speed;
     3a6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
while(!(TIFR1 & (1<<TOV1)));
     3aa:	b0 9b       	sbis	0x16, 0	; 22
     3ac:	fe cf       	rjmp	.-4      	; 0x3aa <Timer_T1_sub+0x10>
TIFR1 |= (1<<TOV1); 
     3ae:	b0 9a       	sbi	0x16, 0	; 22
TCCR1B = 0;}
     3b0:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     3b4:	08 95       	ret

000003b6 <USART_init>:




/*********************************************************************/
void USART_init (unsigned char UBRROH_N, unsigned char UBRR0L_N ){
     3b6:	cf 93       	push	r28
     3b8:	df 93       	push	r29
     3ba:	d8 2f       	mov	r29, r24
     3bc:	c6 2f       	mov	r28, r22
Timer_T1_sub(T1_delay_100ms);
     3be:	62 ef       	ldi	r22, 0xF2	; 242
     3c0:	7c ef       	ldi	r23, 0xFC	; 252
     3c2:	85 e0       	ldi	r24, 0x05	; 5
     3c4:	0e 94 cd 01 	call	0x39a	; 0x39a <Timer_T1_sub>
UCSR0B = 0;
     3c8:	e1 ec       	ldi	r30, 0xC1	; 193
     3ca:	f0 e0       	ldi	r31, 0x00	; 0
     3cc:	10 82       	st	Z, r1
UBRR0H = UBRROH_N;  									
     3ce:	d0 93 c5 00 	sts	0x00C5, r29	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
UBRR0L = UBRR0L_N;  								
     3d2:	c0 93 c4 00 	sts	0x00C4, r28	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
UCSR0A = (1 << U2X0);
     3d6:	82 e0       	ldi	r24, 0x02	; 2
     3d8:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
UCSR0B = (1 << RXEN0) | (1<< TXEN0);
     3dc:	88 e1       	ldi	r24, 0x18	; 24
     3de:	80 83       	st	Z, r24
UCSR0C =  (1 << UCSZ00)| (1 << UCSZ01);}
     3e0:	86 e0       	ldi	r24, 0x06	; 6
     3e2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     3e6:	df 91       	pop	r29
     3e8:	cf 91       	pop	r28
     3ea:	08 95       	ret

000003ec <save_cal_values>:



/********************************************************************************************************************************/
void save_cal_values(unsigned char OSCCAL_user){
     3ec:	cf 93       	push	r28
     3ee:	c8 2f       	mov	r28, r24
eeprom_write_byte((uint8_t*)(EE_size - 1), OSCCAL_user); 
     3f0:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <__data_end>
     3f4:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <__data_end+0x1>
     3f8:	6c 2f       	mov	r22, r28
     3fa:	01 97       	sbiw	r24, 0x01	; 1
     3fc:	0e 94 34 09 	call	0x1268	; 0x1268 <eeprom_write_byte>
eeprom_write_byte((uint8_t*)(EE_size - 2), OSCCAL_user); 
     400:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <__data_end>
     404:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <__data_end+0x1>
     408:	6c 2f       	mov	r22, r28
     40a:	02 97       	sbiw	r24, 0x02	; 2
     40c:	0e 94 34 09 	call	0x1268	; 0x1268 <eeprom_write_byte>
eeprom_write_byte((uint8_t*)(EE_size - 3), OSCCAL_DV);}
     410:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <__data_end>
     414:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <__data_end+0x1>
     418:	60 91 98 02 	lds	r22, 0x0298	; 0x800298 <OSCCAL_DV>
     41c:	03 97       	sbiw	r24, 0x03	; 3
     41e:	0e 94 34 09 	call	0x1268	; 0x1268 <eeprom_write_byte>
     422:	cf 91       	pop	r28
     424:	08 95       	ret

00000426 <printout_cal_values>:



/********************************************************************************************************************************/
void printout_cal_values(void){
sendString("\r\nValues saved to EEPROM  ");	
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	91 e0       	ldi	r25, 0x01	; 1
     42a:	0e 94 9b 00 	call	0x136	; 0x136 <sendString>
Num_to_PC(10,eeprom_read_byte((uint8_t*)EE_size-1)); sendChar('\t');
     42e:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <__data_end>
     432:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <__data_end+0x1>
     436:	01 97       	sbiw	r24, 0x01	; 1
     438:	0e 94 2c 09 	call	0x1258	; 0x1258 <eeprom_read_byte>
     43c:	48 2f       	mov	r20, r24
     43e:	50 e0       	ldi	r21, 0x00	; 0
     440:	60 e0       	ldi	r22, 0x00	; 0
     442:	70 e0       	ldi	r23, 0x00	; 0
     444:	8a e0       	ldi	r24, 0x0A	; 10
     446:	0e 94 76 01 	call	0x2ec	; 0x2ec <Num_to_PC>
     44a:	89 e0       	ldi	r24, 0x09	; 9
     44c:	0e 94 93 00 	call	0x126	; 0x126 <sendChar>
Num_to_PC(10,eeprom_read_byte((uint8_t*)EE_size-2)); sendString("\tUser value\r\n\t\t\t");
     450:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <__data_end>
     454:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <__data_end+0x1>
     458:	02 97       	sbiw	r24, 0x02	; 2
     45a:	0e 94 2c 09 	call	0x1258	; 0x1258 <eeprom_read_byte>
     45e:	48 2f       	mov	r20, r24
     460:	50 e0       	ldi	r21, 0x00	; 0
     462:	60 e0       	ldi	r22, 0x00	; 0
     464:	70 e0       	ldi	r23, 0x00	; 0
     466:	8a e0       	ldi	r24, 0x0A	; 10
     468:	0e 94 76 01 	call	0x2ec	; 0x2ec <Num_to_PC>
     46c:	8b e1       	ldi	r24, 0x1B	; 27
     46e:	91 e0       	ldi	r25, 0x01	; 1
     470:	0e 94 9b 00 	call	0x136	; 0x136 <sendString>
Num_to_PC(10,eeprom_read_byte((uint8_t*)EE_size-3)); sendString("\t\tDefault value\r\n");}
     474:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <__data_end>
     478:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <__data_end+0x1>
     47c:	03 97       	sbiw	r24, 0x03	; 3
     47e:	0e 94 2c 09 	call	0x1258	; 0x1258 <eeprom_read_byte>
     482:	48 2f       	mov	r20, r24
     484:	50 e0       	ldi	r21, 0x00	; 0
     486:	60 e0       	ldi	r22, 0x00	; 0
     488:	70 e0       	ldi	r23, 0x00	; 0
     48a:	8a e0       	ldi	r24, 0x0A	; 10
     48c:	0e 94 76 01 	call	0x2ec	; 0x2ec <Num_to_PC>
     490:	8c e2       	ldi	r24, 0x2C	; 44
     492:	91 e0       	ldi	r25, 0x01	; 1
     494:	0e 94 9b 00 	call	0x136	; 0x136 <sendString>
     498:	08 95       	ret

0000049a <initialise_timers_for_cal_error>:



/******************************************************************************************************************************/
void initialise_timers_for_cal_error(void){
TCNT1=0;TCCR1B = 0;													//Reset and halt T1
     49a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     49e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     4a2:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
TCCR2B =  0x0;	while(ASSR & (1 << TCR2BUB));						//Halt T2
     4a6:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
     4aa:	e6 eb       	ldi	r30, 0xB6	; 182
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	80 81       	ld	r24, Z
     4b0:	80 fd       	sbrc	r24, 0
     4b2:	fd cf       	rjmp	.-6      	; 0x4ae <initialise_timers_for_cal_error+0x14>
TCCR2A = 0; while(ASSR & (1 << TCR2AUB));							//Reset T2 
     4b4:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     4b8:	e6 eb       	ldi	r30, 0xB6	; 182
     4ba:	f0 e0       	ldi	r31, 0x00	; 0
     4bc:	80 81       	ld	r24, Z
     4be:	81 fd       	sbrc	r24, 1
     4c0:	fd cf       	rjmp	.-6      	; 0x4bc <initialise_timers_for_cal_error+0x22>
TCNT2=0; while(ASSR & (1 << TCN2UB));	}							//Reset TCNT2
     4c2:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
     4c6:	e6 eb       	ldi	r30, 0xB6	; 182
     4c8:	f0 e0       	ldi	r31, 0x00	; 0
     4ca:	80 81       	ld	r24, Z
     4cc:	84 fd       	sbrc	r24, 4
     4ce:	fd cf       	rjmp	.-6      	; 0x4ca <initialise_timers_for_cal_error+0x30>
     4d0:	08 95       	ret

000004d2 <start_timers_for_cal_error>:



/*********************************************************************************************************************************/
void start_timers_for_cal_error(void)
{TCCR2B = 1; 	
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
while(ASSR & (1 << TCR2BUB));
     4d8:	e6 eb       	ldi	r30, 0xB6	; 182
     4da:	f0 e0       	ldi	r31, 0x00	; 0
     4dc:	80 81       	ld	r24, Z
     4de:	80 fd       	sbrc	r24, 0
     4e0:	fd cf       	rjmp	.-6      	; 0x4dc <start_timers_for_cal_error+0xa>
TCCR1B = 1;}
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     4e8:	08 95       	ret

000004ea <compute_error>:
if (*counter_2 < 20)*OSCCAL_mem = OSCCAL;else OSCCAL = *OSCCAL_mem;}


/**************************************************************************************************************************************/		
long compute_error(char local_error_mode, char local_cal_mode, char sign)					
{long error;
     4ea:	8f 92       	push	r8
     4ec:	9f 92       	push	r9
     4ee:	af 92       	push	r10
     4f0:	bf 92       	push	r11
     4f2:	cf 92       	push	r12
     4f4:	df 92       	push	r13
     4f6:	ef 92       	push	r14
     4f8:	ff 92       	push	r15
     4fa:	0f 93       	push	r16
     4fc:	1f 93       	push	r17
     4fe:	cf 93       	push	r28
char Num_1, Num_2;
	
if (local_cal_mode == 1){Num_1 = 2; Num_2 = 1;}
if (local_cal_mode == 2){Num_1 = 6; Num_2 = 4;}
     500:	62 30       	cpi	r22, 0x02	; 2
     502:	29 f0       	breq	.+10     	; 0x50e <compute_error+0x24>
if (local_cal_mode == 5){Num_1 = 15; Num_2 = 10;}
     504:	65 30       	cpi	r22, 0x05	; 5
     506:	31 f4       	brne	.+12     	; 0x514 <compute_error+0x2a>
     508:	ca e0       	ldi	r28, 0x0A	; 10
     50a:	ef e0       	ldi	r30, 0x0F	; 15
     50c:	05 c0       	rjmp	.+10     	; 0x518 <compute_error+0x2e>
long compute_error(char local_error_mode, char local_cal_mode, char sign)					
{long error;
char Num_1, Num_2;
	
if (local_cal_mode == 1){Num_1 = 2; Num_2 = 1;}
if (local_cal_mode == 2){Num_1 = 6; Num_2 = 4;}
     50e:	c4 e0       	ldi	r28, 0x04	; 4
     510:	e6 e0       	ldi	r30, 0x06	; 6
     512:	02 c0       	rjmp	.+4      	; 0x518 <compute_error+0x2e>
     514:	c1 e0       	ldi	r28, 0x01	; 1
     516:	e2 e0       	ldi	r30, 0x02	; 2
if (local_cal_mode == 5){Num_1 = 15; Num_2 = 10;}
		
EA_counter = 0;															//Compute error for each value of OSCCAL 10 times
     518:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <EA_counter+0x1>
     51c:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <EA_counter>
error_SUM = 0;
     520:	10 92 6f 03 	sts	0x036F, r1	; 0x80036f <error_SUM>
     524:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <error_SUM+0x1>
     528:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <error_SUM+0x2>
     52c:	10 92 72 03 	sts	0x0372, r1	; 0x800372 <error_SUM+0x3>
while(EA_counter < Num_1);EA_counter = 0;
     530:	f0 e0       	ldi	r31, 0x00	; 0
     532:	60 91 ac 02 	lds	r22, 0x02AC	; 0x8002ac <EA_counter>
     536:	70 91 ad 02 	lds	r23, 0x02AD	; 0x8002ad <EA_counter+0x1>
     53a:	6e 17       	cp	r22, r30
     53c:	7f 07       	cpc	r23, r31
     53e:	cc f3       	brlt	.-14     	; 0x532 <compute_error+0x48>
     540:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <EA_counter+0x1>
     544:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <EA_counter>
error = error_SUM;
     548:	c0 90 6f 03 	lds	r12, 0x036F	; 0x80036f <error_SUM>
     54c:	d0 90 70 03 	lds	r13, 0x0370	; 0x800370 <error_SUM+0x1>
     550:	e0 90 71 03 	lds	r14, 0x0371	; 0x800371 <error_SUM+0x2>
     554:	f0 90 72 03 	lds	r15, 0x0372	; 0x800372 <error_SUM+0x3>
if ((!sign) && (error < 0)) error *= (-1);
     558:	41 11       	cpse	r20, r1
     55a:	0a c0       	rjmp	.+20     	; 0x570 <compute_error+0x86>
     55c:	ff 20       	and	r15, r15
     55e:	44 f4       	brge	.+16     	; 0x570 <compute_error+0x86>
     560:	f0 94       	com	r15
     562:	e0 94       	com	r14
     564:	d0 94       	com	r13
     566:	c0 94       	com	r12
     568:	c1 1c       	adc	r12, r1
     56a:	d1 1c       	adc	r13, r1
     56c:	e1 1c       	adc	r14, r1
     56e:	f1 1c       	adc	r15, r1
if (local_error_mode)
     570:	88 23       	and	r24, r24
     572:	11 f1       	breq	.+68     	; 0x5b8 <compute_error+0xce>
{buffer[EA_buff_ptr] = error/Num_2; EA_buff_ptr++;}
     574:	00 91 66 03 	lds	r16, 0x0366	; 0x800366 <EA_buff_ptr>
     578:	10 91 67 03 	lds	r17, 0x0367	; 0x800367 <EA_buff_ptr+0x1>
     57c:	00 0f       	add	r16, r16
     57e:	11 1f       	adc	r17, r17
     580:	00 0f       	add	r16, r16
     582:	11 1f       	adc	r17, r17
     584:	0e 54       	subi	r16, 0x4E	; 78
     586:	1d 4f       	sbci	r17, 0xFD	; 253
     588:	8c 2e       	mov	r8, r28
     58a:	91 2c       	mov	r9, r1
     58c:	a1 2c       	mov	r10, r1
     58e:	b1 2c       	mov	r11, r1
     590:	c7 01       	movw	r24, r14
     592:	b6 01       	movw	r22, r12
     594:	a5 01       	movw	r20, r10
     596:	94 01       	movw	r18, r8
     598:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__divmodsi4>
     59c:	f8 01       	movw	r30, r16
     59e:	20 83       	st	Z, r18
     5a0:	31 83       	std	Z+1, r19	; 0x01
     5a2:	42 83       	std	Z+2, r20	; 0x02
     5a4:	53 83       	std	Z+3, r21	; 0x03
     5a6:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <EA_buff_ptr>
     5aa:	90 91 67 03 	lds	r25, 0x0367	; 0x800367 <EA_buff_ptr+0x1>
     5ae:	01 96       	adiw	r24, 0x01	; 1
     5b0:	90 93 67 03 	sts	0x0367, r25	; 0x800367 <EA_buff_ptr+0x1>
     5b4:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <EA_buff_ptr>
return error/Num_2;}
     5b8:	2c 2f       	mov	r18, r28
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	40 e0       	ldi	r20, 0x00	; 0
     5be:	50 e0       	ldi	r21, 0x00	; 0
     5c0:	c7 01       	movw	r24, r14
     5c2:	b6 01       	movw	r22, r12
     5c4:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__divmodsi4>
     5c8:	ca 01       	movw	r24, r20
     5ca:	b9 01       	movw	r22, r18
     5cc:	cf 91       	pop	r28
     5ce:	1f 91       	pop	r17
     5d0:	0f 91       	pop	r16
     5d2:	ff 90       	pop	r15
     5d4:	ef 90       	pop	r14
     5d6:	df 90       	pop	r13
     5d8:	cf 90       	pop	r12
     5da:	bf 90       	pop	r11
     5dc:	af 90       	pop	r10
     5de:	9f 90       	pop	r9
     5e0:	8f 90       	pop	r8
     5e2:	08 95       	ret

000005e4 <Minimise_error_down>:



/*********************************************************************************************************************************/
void Minimise_error_down(int limit, unsigned char *counter_1, unsigned char *counter_2, long *error_mag, unsigned char *OSCCAL_mem, char local_cal_mode )
{while(*counter_2 < 20){ OSCCAL = *counter_1; *error_mag = compute_error(0,local_cal_mode,0); 
     5e4:	4f 92       	push	r4
     5e6:	5f 92       	push	r5
     5e8:	6f 92       	push	r6
     5ea:	7f 92       	push	r7
     5ec:	8f 92       	push	r8
     5ee:	9f 92       	push	r9
     5f0:	af 92       	push	r10
     5f2:	bf 92       	push	r11
     5f4:	cf 92       	push	r12
     5f6:	df 92       	push	r13
     5f8:	ef 92       	push	r14
     5fa:	0f 93       	push	r16
     5fc:	1f 93       	push	r17
     5fe:	cf 93       	push	r28
     600:	df 93       	push	r29
     602:	2c 01       	movw	r4, r24
     604:	eb 01       	movw	r28, r22
     606:	6a 01       	movw	r12, r20
     608:	59 01       	movw	r10, r18
     60a:	fa 01       	movw	r30, r20
     60c:	90 81       	ld	r25, Z
     60e:	94 31       	cpi	r25, 0x14	; 20
     610:	70 f5       	brcc	.+92     	; 0x66e <Minimise_error_down+0x8a>
     612:	0f 2e       	mov	r0, r31
     614:	f6 e6       	ldi	r31, 0x66	; 102
     616:	8f 2e       	mov	r8, r31
     618:	91 2c       	mov	r9, r1
     61a:	f0 2d       	mov	r31, r0
if(*error_mag < limit)break;
     61c:	05 2c       	mov	r0, r5
     61e:	00 0c       	add	r0, r0
     620:	66 08       	sbc	r6, r6
     622:	77 08       	sbc	r7, r7



/*********************************************************************************************************************************/
void Minimise_error_down(int limit, unsigned char *counter_1, unsigned char *counter_2, long *error_mag, unsigned char *OSCCAL_mem, char local_cal_mode )
{while(*counter_2 < 20){ OSCCAL = *counter_1; *error_mag = compute_error(0,local_cal_mode,0); 
     624:	88 81       	ld	r24, Y
     626:	f4 01       	movw	r30, r8
     628:	80 83       	st	Z, r24
     62a:	40 e0       	ldi	r20, 0x00	; 0
     62c:	6e 2d       	mov	r22, r14
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	0e 94 75 02 	call	0x4ea	; 0x4ea <compute_error>
     634:	f5 01       	movw	r30, r10
     636:	60 83       	st	Z, r22
     638:	71 83       	std	Z+1, r23	; 0x01
     63a:	82 83       	std	Z+2, r24	; 0x02
     63c:	93 83       	std	Z+3, r25	; 0x03
if(*error_mag < limit)break;
     63e:	64 15       	cp	r22, r4
     640:	75 05       	cpc	r23, r5
     642:	86 05       	cpc	r24, r6
     644:	97 05       	cpc	r25, r7
     646:	54 f0       	brlt	.+20     	; 0x65c <Minimise_error_down+0x78>
*counter_1 -= 1;
     648:	88 81       	ld	r24, Y
     64a:	81 50       	subi	r24, 0x01	; 1
     64c:	88 83       	st	Y, r24
*counter_2 +=1;}
     64e:	f6 01       	movw	r30, r12
     650:	80 81       	ld	r24, Z
     652:	8f 5f       	subi	r24, 0xFF	; 255
     654:	80 83       	st	Z, r24



/*********************************************************************************************************************************/
void Minimise_error_down(int limit, unsigned char *counter_1, unsigned char *counter_2, long *error_mag, unsigned char *OSCCAL_mem, char local_cal_mode )
{while(*counter_2 < 20){ OSCCAL = *counter_1; *error_mag = compute_error(0,local_cal_mode,0); 
     656:	84 31       	cpi	r24, 0x14	; 20
     658:	28 f3       	brcs	.-54     	; 0x624 <Minimise_error_down+0x40>
     65a:	09 c0       	rjmp	.+18     	; 0x66e <Minimise_error_down+0x8a>
if(*error_mag < limit)break;
*counter_1 -= 1;
*counter_2 +=1;}
if (*counter_2 < 20)*OSCCAL_mem = OSCCAL;else OSCCAL = *OSCCAL_mem;}
     65c:	f6 01       	movw	r30, r12
     65e:	80 81       	ld	r24, Z
     660:	84 31       	cpi	r24, 0x14	; 20
     662:	28 f4       	brcc	.+10     	; 0x66e <Minimise_error_down+0x8a>
     664:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
     668:	f8 01       	movw	r30, r16
     66a:	80 83       	st	Z, r24
     66c:	04 c0       	rjmp	.+8      	; 0x676 <Minimise_error_down+0x92>
     66e:	f8 01       	movw	r30, r16
     670:	80 81       	ld	r24, Z
     672:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
     676:	df 91       	pop	r29
     678:	cf 91       	pop	r28
     67a:	1f 91       	pop	r17
     67c:	0f 91       	pop	r16
     67e:	ef 90       	pop	r14
     680:	df 90       	pop	r13
     682:	cf 90       	pop	r12
     684:	bf 90       	pop	r11
     686:	af 90       	pop	r10
     688:	9f 90       	pop	r9
     68a:	8f 90       	pop	r8
     68c:	7f 90       	pop	r7
     68e:	6f 90       	pop	r6
     690:	5f 90       	pop	r5
     692:	4f 90       	pop	r4
     694:	08 95       	ret

00000696 <Minimise_error_up>:


void Minimise_error_up(int limit, unsigned char *counter_1, unsigned char *counter_2, long *error_mag, unsigned char *OSCCAL_mem, char local_cal_mode )
{while(*counter_2 < 20){ OSCCAL = *counter_1; *error_mag = compute_error(0,local_cal_mode,0);
     696:	4f 92       	push	r4
     698:	5f 92       	push	r5
     69a:	6f 92       	push	r6
     69c:	7f 92       	push	r7
     69e:	8f 92       	push	r8
     6a0:	9f 92       	push	r9
     6a2:	af 92       	push	r10
     6a4:	bf 92       	push	r11
     6a6:	cf 92       	push	r12
     6a8:	df 92       	push	r13
     6aa:	ef 92       	push	r14
     6ac:	0f 93       	push	r16
     6ae:	1f 93       	push	r17
     6b0:	cf 93       	push	r28
     6b2:	df 93       	push	r29
     6b4:	2c 01       	movw	r4, r24
     6b6:	eb 01       	movw	r28, r22
     6b8:	6a 01       	movw	r12, r20
     6ba:	59 01       	movw	r10, r18
     6bc:	fa 01       	movw	r30, r20
     6be:	90 81       	ld	r25, Z
     6c0:	94 31       	cpi	r25, 0x14	; 20
     6c2:	70 f5       	brcc	.+92     	; 0x720 <Minimise_error_up+0x8a>
     6c4:	0f 2e       	mov	r0, r31
     6c6:	f6 e6       	ldi	r31, 0x66	; 102
     6c8:	8f 2e       	mov	r8, r31
     6ca:	91 2c       	mov	r9, r1
     6cc:	f0 2d       	mov	r31, r0
	if(*error_mag < limit)break;
     6ce:	05 2c       	mov	r0, r5
     6d0:	00 0c       	add	r0, r0
     6d2:	66 08       	sbc	r6, r6
     6d4:	77 08       	sbc	r7, r7
*counter_2 +=1;}
if (*counter_2 < 20)*OSCCAL_mem = OSCCAL;else OSCCAL = *OSCCAL_mem;}


void Minimise_error_up(int limit, unsigned char *counter_1, unsigned char *counter_2, long *error_mag, unsigned char *OSCCAL_mem, char local_cal_mode )
{while(*counter_2 < 20){ OSCCAL = *counter_1; *error_mag = compute_error(0,local_cal_mode,0);
     6d6:	88 81       	ld	r24, Y
     6d8:	f4 01       	movw	r30, r8
     6da:	80 83       	st	Z, r24
     6dc:	40 e0       	ldi	r20, 0x00	; 0
     6de:	6e 2d       	mov	r22, r14
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	0e 94 75 02 	call	0x4ea	; 0x4ea <compute_error>
     6e6:	f5 01       	movw	r30, r10
     6e8:	60 83       	st	Z, r22
     6ea:	71 83       	std	Z+1, r23	; 0x01
     6ec:	82 83       	std	Z+2, r24	; 0x02
     6ee:	93 83       	std	Z+3, r25	; 0x03
	if(*error_mag < limit)break;
     6f0:	64 15       	cp	r22, r4
     6f2:	75 05       	cpc	r23, r5
     6f4:	86 05       	cpc	r24, r6
     6f6:	97 05       	cpc	r25, r7
     6f8:	54 f0       	brlt	.+20     	; 0x70e <Minimise_error_up+0x78>
	*counter_1 += 1;
     6fa:	88 81       	ld	r24, Y
     6fc:	8f 5f       	subi	r24, 0xFF	; 255
     6fe:	88 83       	st	Y, r24
*counter_2 +=1;}
     700:	f6 01       	movw	r30, r12
     702:	80 81       	ld	r24, Z
     704:	8f 5f       	subi	r24, 0xFF	; 255
     706:	80 83       	st	Z, r24
*counter_2 +=1;}
if (*counter_2 < 20)*OSCCAL_mem = OSCCAL;else OSCCAL = *OSCCAL_mem;}


void Minimise_error_up(int limit, unsigned char *counter_1, unsigned char *counter_2, long *error_mag, unsigned char *OSCCAL_mem, char local_cal_mode )
{while(*counter_2 < 20){ OSCCAL = *counter_1; *error_mag = compute_error(0,local_cal_mode,0);
     708:	84 31       	cpi	r24, 0x14	; 20
     70a:	28 f3       	brcs	.-54     	; 0x6d6 <Minimise_error_up+0x40>
     70c:	09 c0       	rjmp	.+18     	; 0x720 <Minimise_error_up+0x8a>
	if(*error_mag < limit)break;
	*counter_1 += 1;
*counter_2 +=1;}
if (*counter_2 < 20)*OSCCAL_mem = OSCCAL;else OSCCAL = *OSCCAL_mem;}
     70e:	f6 01       	movw	r30, r12
     710:	80 81       	ld	r24, Z
     712:	84 31       	cpi	r24, 0x14	; 20
     714:	28 f4       	brcc	.+10     	; 0x720 <Minimise_error_up+0x8a>
     716:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
     71a:	f8 01       	movw	r30, r16
     71c:	80 83       	st	Z, r24
     71e:	04 c0       	rjmp	.+8      	; 0x728 <Minimise_error_up+0x92>
     720:	f8 01       	movw	r30, r16
     722:	80 81       	ld	r24, Z
     724:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
     728:	df 91       	pop	r29
     72a:	cf 91       	pop	r28
     72c:	1f 91       	pop	r17
     72e:	0f 91       	pop	r16
     730:	ef 90       	pop	r14
     732:	df 90       	pop	r13
     734:	cf 90       	pop	r12
     736:	bf 90       	pop	r11
     738:	af 90       	pop	r10
     73a:	9f 90       	pop	r9
     73c:	8f 90       	pop	r8
     73e:	7f 90       	pop	r7
     740:	6f 90       	pop	r6
     742:	5f 90       	pop	r5
     744:	4f 90       	pop	r4
     746:	08 95       	ret

00000748 <Auto_cal>:




/************************************************************************************************/
void Auto_cal (char direction){
     748:	cf 92       	push	r12
     74a:	df 92       	push	r13
     74c:	ef 92       	push	r14
     74e:	0f 93       	push	r16
     750:	1f 93       	push	r17
     752:	cf 93       	push	r28
     754:	df 93       	push	r29
     756:	cd b7       	in	r28, 0x3d	; 61
     758:	de b7       	in	r29, 0x3e	; 62
     75a:	27 97       	sbiw	r28, 0x07	; 7
     75c:	0f b6       	in	r0, 0x3f	; 63
     75e:	f8 94       	cli
     760:	de bf       	out	0x3e, r29	; 62
     762:	0f be       	out	0x3f, r0	; 63
     764:	cd bf       	out	0x3d, r28	; 61
     766:	18 2f       	mov	r17, r24
	unsigned char counter_1, counter_2;
	unsigned char OSCCAL_mem = 0;
     768:	1b 82       	std	Y+3, r1	; 0x03
	long  error_mag;
	int limit;

	UCSR0B &= (~(1 << RXEN0));												//avoid unwanted keypresses
     76a:	e1 ec       	ldi	r30, 0xC1	; 193
     76c:	f0 e0       	ldi	r31, 0x00	; 0
     76e:	80 81       	ld	r24, Z
     770:	8f 7e       	andi	r24, 0xEF	; 239
     772:	80 83       	st	Z, r24

	Timer_T1_sub(T1_delay_1sec);											//Crystal warm up time
     774:	6d e7       	ldi	r22, 0x7D	; 125
     776:	71 ee       	ldi	r23, 0xE1	; 225
     778:	85 e0       	ldi	r24, 0x05	; 5
     77a:	0e 94 cd 01 	call	0x39a	; 0x39a <Timer_T1_sub>

	sei();
     77e:	78 94       	sei
	cal_mode = 1;
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <cal_mode>
	Get_ready_to_calibrate;
     786:	e0 e7       	ldi	r30, 0x70	; 112
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	80 81       	ld	r24, Z
     78c:	81 60       	ori	r24, 0x01	; 1
     78e:	80 83       	st	Z, r24
     790:	ef e6       	ldi	r30, 0x6F	; 111
     792:	f0 e0       	ldi	r31, 0x00	; 0
     794:	80 81       	ld	r24, Z
     796:	81 60       	ori	r24, 0x01	; 1
     798:	80 83       	st	Z, r24
     79a:	0e 94 4d 02 	call	0x49a	; 0x49a <initialise_timers_for_cal_error>
     79e:	0e 94 69 02 	call	0x4d2	; 0x4d2 <start_timers_for_cal_error>
	
	if (!(direction))
     7a2:	11 11       	cpse	r17, r1
     7a4:	aa c0       	rjmp	.+340    	; 0x8fa <Auto_cal+0x1b2>
		{counter_1 = 0xF1;
     7a6:	81 ef       	ldi	r24, 0xF1	; 241
     7a8:	89 83       	std	Y+1, r24	; 0x01
		while(1){sendChar('.');
			counter_1 -= 1;
			OSCCAL = counter_1; error_mag = compute_error(0,cal_mode,0);
     7aa:	06 e6       	ldi	r16, 0x66	; 102
     7ac:	10 e0       	ldi	r17, 0x00	; 0
	cal_mode = 1;
	Get_ready_to_calibrate;
	
	if (!(direction))
		{counter_1 = 0xF1;
		while(1){sendChar('.');
     7ae:	8e e2       	ldi	r24, 0x2E	; 46
     7b0:	0e 94 93 00 	call	0x126	; 0x126 <sendChar>
			counter_1 -= 1;
     7b4:	89 81       	ldd	r24, Y+1	; 0x01
     7b6:	81 50       	subi	r24, 0x01	; 1
     7b8:	89 83       	std	Y+1, r24	; 0x01
			OSCCAL = counter_1; error_mag = compute_error(0,cal_mode,0);
     7ba:	f8 01       	movw	r30, r16
     7bc:	80 83       	st	Z, r24
     7be:	60 91 96 02 	lds	r22, 0x0296	; 0x800296 <cal_mode>
     7c2:	40 e0       	ldi	r20, 0x00	; 0
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	0e 94 75 02 	call	0x4ea	; 0x4ea <compute_error>
     7ca:	6c 83       	std	Y+4, r22	; 0x04
     7cc:	7d 83       	std	Y+5, r23	; 0x05
     7ce:	8e 83       	std	Y+6, r24	; 0x06
     7d0:	9f 83       	std	Y+7, r25	; 0x07
			if(counter_1 > 0xE0)continue;
     7d2:	29 81       	ldd	r18, Y+1	; 0x01
     7d4:	21 3e       	cpi	r18, 0xE1	; 225
     7d6:	58 f7       	brcc	.-42     	; 0x7ae <Auto_cal+0x66>
			if(error_mag < 1000)break;}
     7d8:	68 3e       	cpi	r22, 0xE8	; 232
     7da:	73 40       	sbci	r23, 0x03	; 3
     7dc:	81 05       	cpc	r24, r1
     7de:	91 05       	cpc	r25, r1
     7e0:	34 f7       	brge	.-52     	; 0x7ae <Auto_cal+0x66>
		OSCCAL_mem = OSCCAL;
     7e2:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
     7e6:	8b 83       	std	Y+3, r24	; 0x03
		counter_2 = 0;
     7e8:	1a 82       	std	Y+2, r1	; 0x02
		cal_mode = 5;
     7ea:	85 e0       	ldi	r24, 0x05	; 5
     7ec:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <cal_mode>
		limit = 1000;
     7f0:	0f 2e       	mov	r0, r31
     7f2:	f8 ee       	ldi	r31, 0xE8	; 232
     7f4:	cf 2e       	mov	r12, r31
     7f6:	f3 e0       	ldi	r31, 0x03	; 3
     7f8:	df 2e       	mov	r13, r31
     7fa:	f0 2d       	mov	r31, r0
		for(int m = 1; m <= 9; m++){sendChar('.');
     7fc:	8e e2       	ldi	r24, 0x2E	; 46
     7fe:	0e 94 93 00 	call	0x126	; 0x126 <sendChar>
			limit -= 100;
     802:	24 e6       	ldi	r18, 0x64	; 100
     804:	c2 1a       	sub	r12, r18
     806:	d1 08       	sbc	r13, r1
			Minimise_error_down(limit, &counter_1, &counter_2,\
     808:	e0 90 96 02 	lds	r14, 0x0296	; 0x800296 <cal_mode>
     80c:	8e 01       	movw	r16, r28
     80e:	0d 5f       	subi	r16, 0xFD	; 253
     810:	1f 4f       	sbci	r17, 0xFF	; 255
     812:	9e 01       	movw	r18, r28
     814:	2c 5f       	subi	r18, 0xFC	; 252
     816:	3f 4f       	sbci	r19, 0xFF	; 255
     818:	ae 01       	movw	r20, r28
     81a:	4e 5f       	subi	r20, 0xFE	; 254
     81c:	5f 4f       	sbci	r21, 0xFF	; 255
     81e:	be 01       	movw	r22, r28
     820:	6f 5f       	subi	r22, 0xFF	; 255
     822:	7f 4f       	sbci	r23, 0xFF	; 255
     824:	c6 01       	movw	r24, r12
     826:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <Minimise_error_down>
			if(error_mag < 1000)break;}
		OSCCAL_mem = OSCCAL;
		counter_2 = 0;
		cal_mode = 5;
		limit = 1000;
		for(int m = 1; m <= 9; m++){sendChar('.');
     82a:	84 e6       	ldi	r24, 0x64	; 100
     82c:	c8 16       	cp	r12, r24
     82e:	d1 04       	cpc	r13, r1
     830:	29 f7       	brne	.-54     	; 0x7fc <Auto_cal+0xb4>
     832:	42 c0       	rjmp	.+132    	; 0x8b8 <Auto_cal+0x170>
			Minimise_error_down(limit, &counter_1, &counter_2,\
			 &error_mag, &OSCCAL_mem, cal_mode);}}
	
	if (direction)
		{counter_1 = 0x0F;
			while(1){sendChar('.');
     834:	8e e2       	ldi	r24, 0x2E	; 46
     836:	0e 94 93 00 	call	0x126	; 0x126 <sendChar>
				counter_1 += 1;
     83a:	89 81       	ldd	r24, Y+1	; 0x01
     83c:	8f 5f       	subi	r24, 0xFF	; 255
     83e:	89 83       	std	Y+1, r24	; 0x01
				OSCCAL = counter_1; error_mag = compute_error(0,cal_mode,0);
     840:	f8 01       	movw	r30, r16
     842:	80 83       	st	Z, r24
     844:	60 91 96 02 	lds	r22, 0x0296	; 0x800296 <cal_mode>
     848:	40 e0       	ldi	r20, 0x00	; 0
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	0e 94 75 02 	call	0x4ea	; 0x4ea <compute_error>
     850:	6c 83       	std	Y+4, r22	; 0x04
     852:	7d 83       	std	Y+5, r23	; 0x05
     854:	8e 83       	std	Y+6, r24	; 0x06
     856:	9f 83       	std	Y+7, r25	; 0x07
				if(counter_1 < 0x20)continue;
     858:	29 81       	ldd	r18, Y+1	; 0x01
     85a:	20 32       	cpi	r18, 0x20	; 32
     85c:	58 f3       	brcs	.-42     	; 0x834 <Auto_cal+0xec>
				if(error_mag < 1000)break;}
     85e:	68 3e       	cpi	r22, 0xE8	; 232
     860:	73 40       	sbci	r23, 0x03	; 3
     862:	81 05       	cpc	r24, r1
     864:	91 05       	cpc	r25, r1
     866:	34 f7       	brge	.-52     	; 0x834 <Auto_cal+0xec>
			OSCCAL_mem = OSCCAL;
     868:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
     86c:	8b 83       	std	Y+3, r24	; 0x03
			counter_2 = 0;
     86e:	1a 82       	std	Y+2, r1	; 0x02
			cal_mode = 5;
     870:	85 e0       	ldi	r24, 0x05	; 5
     872:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <cal_mode>
			limit = 1000;
     876:	0f 2e       	mov	r0, r31
     878:	f8 ee       	ldi	r31, 0xE8	; 232
     87a:	cf 2e       	mov	r12, r31
     87c:	f3 e0       	ldi	r31, 0x03	; 3
     87e:	df 2e       	mov	r13, r31
     880:	f0 2d       	mov	r31, r0
			for(int m = 1; m <= 9; m++){sendChar('.');
     882:	8e e2       	ldi	r24, 0x2E	; 46
     884:	0e 94 93 00 	call	0x126	; 0x126 <sendChar>
				limit -= 100;
     888:	24 e6       	ldi	r18, 0x64	; 100
     88a:	c2 1a       	sub	r12, r18
     88c:	d1 08       	sbc	r13, r1
				Minimise_error_up(limit, &counter_1, &counter_2,\
     88e:	e0 90 96 02 	lds	r14, 0x0296	; 0x800296 <cal_mode>
     892:	8e 01       	movw	r16, r28
     894:	0d 5f       	subi	r16, 0xFD	; 253
     896:	1f 4f       	sbci	r17, 0xFF	; 255
     898:	9e 01       	movw	r18, r28
     89a:	2c 5f       	subi	r18, 0xFC	; 252
     89c:	3f 4f       	sbci	r19, 0xFF	; 255
     89e:	ae 01       	movw	r20, r28
     8a0:	4e 5f       	subi	r20, 0xFE	; 254
     8a2:	5f 4f       	sbci	r21, 0xFF	; 255
     8a4:	be 01       	movw	r22, r28
     8a6:	6f 5f       	subi	r22, 0xFF	; 255
     8a8:	7f 4f       	sbci	r23, 0xFF	; 255
     8aa:	c6 01       	movw	r24, r12
     8ac:	0e 94 4b 03 	call	0x696	; 0x696 <Minimise_error_up>
				if(error_mag < 1000)break;}
			OSCCAL_mem = OSCCAL;
			counter_2 = 0;
			cal_mode = 5;
			limit = 1000;
			for(int m = 1; m <= 9; m++){sendChar('.');
     8b0:	84 e6       	ldi	r24, 0x64	; 100
     8b2:	c8 16       	cp	r12, r24
     8b4:	d1 04       	cpc	r13, r1
     8b6:	29 f7       	brne	.-54     	; 0x882 <Auto_cal+0x13a>
				limit -= 100;
				Minimise_error_up(limit, &counter_1, &counter_2,\
				 &error_mag, &OSCCAL_mem, cal_mode);}}
	
	error_mag = compute_error(0,cal_mode,0);
     8b8:	60 91 96 02 	lds	r22, 0x0296	; 0x800296 <cal_mode>
     8bc:	40 e0       	ldi	r20, 0x00	; 0
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	0e 94 75 02 	call	0x4ea	; 0x4ea <compute_error>
     8c4:	6c 83       	std	Y+4, r22	; 0x04
     8c6:	7d 83       	std	Y+5, r23	; 0x05
     8c8:	8e 83       	std	Y+6, r24	; 0x06
     8ca:	9f 83       	std	Y+7, r25	; 0x07
	OSCCAL_WV = OSCCAL;
     8cc:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
     8d0:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <OSCCAL_WV>
	close_calibration;
     8d4:	0e 94 4d 02 	call	0x49a	; 0x49a <initialise_timers_for_cal_error>
     8d8:	e0 e7       	ldi	r30, 0x70	; 112
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	80 81       	ld	r24, Z
     8de:	8e 7f       	andi	r24, 0xFE	; 254
     8e0:	80 83       	st	Z, r24
     8e2:	ef e6       	ldi	r30, 0x6F	; 111
     8e4:	f0 e0       	ldi	r31, 0x00	; 0
     8e6:	80 81       	ld	r24, Z
     8e8:	8e 7f       	andi	r24, 0xFE	; 254
     8ea:	80 83       	st	Z, r24

	UCSR0B |= (1 << RXEN0);
     8ec:	e1 ec       	ldi	r30, 0xC1	; 193
     8ee:	f0 e0       	ldi	r31, 0x00	; 0
     8f0:	80 81       	ld	r24, Z
     8f2:	80 61       	ori	r24, 0x10	; 16
     8f4:	80 83       	st	Z, r24
cli();}
     8f6:	f8 94       	cli
     8f8:	05 c0       	rjmp	.+10     	; 0x904 <__stack+0x5>
			limit -= 100;
			Minimise_error_down(limit, &counter_1, &counter_2,\
			 &error_mag, &OSCCAL_mem, cal_mode);}}
	
	if (direction)
		{counter_1 = 0x0F;
     8fa:	8f e0       	ldi	r24, 0x0F	; 15
     8fc:	89 83       	std	Y+1, r24	; 0x01
			while(1){sendChar('.');
				counter_1 += 1;
				OSCCAL = counter_1; error_mag = compute_error(0,cal_mode,0);
     8fe:	06 e6       	ldi	r16, 0x66	; 102
     900:	10 e0       	ldi	r17, 0x00	; 0
     902:	98 cf       	rjmp	.-208    	; 0x834 <Auto_cal+0xec>
	error_mag = compute_error(0,cal_mode,0);
	OSCCAL_WV = OSCCAL;
	close_calibration;

	UCSR0B |= (1 << RXEN0);
cli();}
     904:	27 96       	adiw	r28, 0x07	; 7
     906:	0f b6       	in	r0, 0x3f	; 63
     908:	f8 94       	cli
     90a:	de bf       	out	0x3e, r29	; 62
     90c:	0f be       	out	0x3f, r0	; 63
     90e:	cd bf       	out	0x3d, r28	; 61
     910:	df 91       	pop	r29
     912:	cf 91       	pop	r28
     914:	1f 91       	pop	r17
     916:	0f 91       	pop	r16
     918:	ef 90       	pop	r14
     91a:	df 90       	pop	r13
     91c:	cf 90       	pop	r12
     91e:	08 95       	ret

00000920 <Manual_cal>:




/**********************************************************************************************************************/
void Manual_cal(void){
     920:	8f 92       	push	r8
     922:	9f 92       	push	r9
     924:	af 92       	push	r10
     926:	bf 92       	push	r11
     928:	cf 92       	push	r12
     92a:	df 92       	push	r13
     92c:	ef 92       	push	r14
     92e:	ff 92       	push	r15
     930:	0f 93       	push	r16
     932:	1f 93       	push	r17
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
	long cal_error;
	unsigned char osccal_MIN;
	long percentage_error;

	UCSR0B &= (~(1 << RXEN0));													//avoid unwanted keypresses
     938:	e1 ec       	ldi	r30, 0xC1	; 193
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	80 81       	ld	r24, Z
     93e:	8f 7e       	andi	r24, 0xEF	; 239
     940:	80 83       	st	Z, r24
	sendString("\r\nManual cal: please wait 5 seconds\r\n");
     942:	8e e3       	ldi	r24, 0x3E	; 62
     944:	91 e0       	ldi	r25, 0x01	; 1
     946:	0e 94 9b 00 	call	0x136	; 0x136 <sendString>
	Timer_T0_sub(T0_delay_5ms);													 //gives printer time to finish
     94a:	6c ed       	ldi	r22, 0xDC	; 220
     94c:	85 e0       	ldi	r24, 0x05	; 5
     94e:	0e 94 c6 01 	call	0x38c	; 0x38c <Timer_T0_sub>

	sei();
     952:	78 94       	sei

	EA_buff_ptr = 0;
     954:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <EA_buff_ptr+0x1>
     958:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <EA_buff_ptr>
	cal_mode = 5;
     95c:	85 e0       	ldi	r24, 0x05	; 5
     95e:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <cal_mode>
	Get_ready_to_calibrate;
     962:	e0 e7       	ldi	r30, 0x70	; 112
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	80 81       	ld	r24, Z
     968:	81 60       	ori	r24, 0x01	; 1
     96a:	80 83       	st	Z, r24
     96c:	ef e6       	ldi	r30, 0x6F	; 111
     96e:	f0 e0       	ldi	r31, 0x00	; 0
     970:	80 81       	ld	r24, Z
     972:	81 60       	ori	r24, 0x01	; 1
     974:	80 83       	st	Z, r24
     976:	0e 94 4d 02 	call	0x49a	; 0x49a <initialise_timers_for_cal_error>
     97a:	0e 94 69 02 	call	0x4d2	; 0x4d2 <start_timers_for_cal_error>
	OSCCAL -=20;
     97e:	e6 e6       	ldi	r30, 0x66	; 102
     980:	f0 e0       	ldi	r31, 0x00	; 0
     982:	80 81       	ld	r24, Z
     984:	84 51       	subi	r24, 0x14	; 20
     986:	80 83       	st	Z, r24
	osccal_MIN = OSCCAL;														//Compute cal error for 41 values of OSCCAL
     988:	10 81       	ld	r17, Z
     98a:	c9 e2       	ldi	r28, 0x29	; 41
     98c:	d0 e0       	ldi	r29, 0x00	; 0
	for(int m = 0; m <= 40; m++)
	{cal_error = compute_error(1,cal_mode,1);OSCCAL++;}
     98e:	0f 2e       	mov	r0, r31
     990:	f6 e6       	ldi	r31, 0x66	; 102
     992:	ef 2e       	mov	r14, r31
     994:	f1 2c       	mov	r15, r1
     996:	f0 2d       	mov	r31, r0
     998:	60 91 96 02 	lds	r22, 0x0296	; 0x800296 <cal_mode>
     99c:	41 e0       	ldi	r20, 0x01	; 1
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	0e 94 75 02 	call	0x4ea	; 0x4ea <compute_error>
     9a4:	f7 01       	movw	r30, r14
     9a6:	80 81       	ld	r24, Z
     9a8:	8f 5f       	subi	r24, 0xFF	; 255
     9aa:	80 83       	st	Z, r24
     9ac:	21 97       	sbiw	r28, 0x01	; 1
	EA_buff_ptr = 0;
	cal_mode = 5;
	Get_ready_to_calibrate;
	OSCCAL -=20;
	osccal_MIN = OSCCAL;														//Compute cal error for 41 values of OSCCAL
	for(int m = 0; m <= 40; m++)
     9ae:	a1 f7       	brne	.-24     	; 0x998 <Manual_cal+0x78>
	{cal_error = compute_error(1,cal_mode,1);OSCCAL++;}
	OSCCAL = OSCCAL_WV;															//Restore working value of OSCCAL
     9b0:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <OSCCAL_WV>
     9b4:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
	close_calibration;
     9b8:	0e 94 4d 02 	call	0x49a	; 0x49a <initialise_timers_for_cal_error>
     9bc:	e0 e7       	ldi	r30, 0x70	; 112
     9be:	f0 e0       	ldi	r31, 0x00	; 0
     9c0:	80 81       	ld	r24, Z
     9c2:	8e 7f       	andi	r24, 0xFE	; 254
     9c4:	80 83       	st	Z, r24
     9c6:	ef e6       	ldi	r30, 0x6F	; 111
     9c8:	f0 e0       	ldi	r31, 0x00	; 0
     9ca:	80 81       	ld	r24, Z
     9cc:	8e 7f       	andi	r24, 0xFE	; 254
     9ce:	80 83       	st	Z, r24

	newline();
     9d0:	0e 94 ba 00 	call	0x174	; 0x174 <newline>
	sendString("OSCCAL\t Error\r\n");
     9d4:	84 e6       	ldi	r24, 0x64	; 100
     9d6:	91 e0       	ldi	r25, 0x01	; 1
     9d8:	0e 94 9b 00 	call	0x136	; 0x136 <sendString>
     9dc:	c2 eb       	ldi	r28, 0xB2	; 178
     9de:	d2 e0       	ldi	r29, 0x02	; 2
     9e0:	0f 2e       	mov	r0, r31
     9e2:	f6 e5       	ldi	r31, 0x56	; 86
     9e4:	cf 2e       	mov	r12, r31
     9e6:	f3 e0       	ldi	r31, 0x03	; 3
     9e8:	df 2e       	mov	r13, r31
     9ea:	f0 2d       	mov	r31, r0
	for(int m = 0; m <= 40; m++)												//Print table of values
	{Num_to_PC(10,osccal_MIN); osccal_MIN++;
		sendChar('\t');Num_to_PC(10,buffer[m]);
		sendChar('\t');
		percentage_error = buffer[m];
		Num_to_PC(10,percentage_error*100/62500);sendChar('%');
     9ec:	0f 2e       	mov	r0, r31
     9ee:	f4 e2       	ldi	r31, 0x24	; 36
     9f0:	8f 2e       	mov	r8, r31
     9f2:	f4 ef       	ldi	r31, 0xF4	; 244
     9f4:	9f 2e       	mov	r9, r31
     9f6:	a1 2c       	mov	r10, r1
     9f8:	b1 2c       	mov	r11, r1
     9fa:	f0 2d       	mov	r31, r0
	newline();
	sendString("OSCCAL\t Error\r\n");


	for(int m = 0; m <= 40; m++)												//Print table of values
	{Num_to_PC(10,osccal_MIN); osccal_MIN++;
     9fc:	41 2f       	mov	r20, r17
     9fe:	50 e0       	ldi	r21, 0x00	; 0
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	8a e0       	ldi	r24, 0x0A	; 10
     a06:	0e 94 76 01 	call	0x2ec	; 0x2ec <Num_to_PC>
     a0a:	1f 5f       	subi	r17, 0xFF	; 255
		sendChar('\t');Num_to_PC(10,buffer[m]);
     a0c:	89 e0       	ldi	r24, 0x09	; 9
     a0e:	0e 94 93 00 	call	0x126	; 0x126 <sendChar>
     a12:	7e 01       	movw	r14, r28
     a14:	49 91       	ld	r20, Y+
     a16:	59 91       	ld	r21, Y+
     a18:	69 91       	ld	r22, Y+
     a1a:	79 91       	ld	r23, Y+
     a1c:	8a e0       	ldi	r24, 0x0A	; 10
     a1e:	0e 94 76 01 	call	0x2ec	; 0x2ec <Num_to_PC>
		sendChar('\t');
     a22:	89 e0       	ldi	r24, 0x09	; 9
     a24:	0e 94 93 00 	call	0x126	; 0x126 <sendChar>
		percentage_error = buffer[m];
		Num_to_PC(10,percentage_error*100/62500);sendChar('%');
     a28:	f7 01       	movw	r30, r14
     a2a:	20 81       	ld	r18, Z
     a2c:	31 81       	ldd	r19, Z+1	; 0x01
     a2e:	42 81       	ldd	r20, Z+2	; 0x02
     a30:	53 81       	ldd	r21, Z+3	; 0x03
     a32:	a4 e6       	ldi	r26, 0x64	; 100
     a34:	b0 e0       	ldi	r27, 0x00	; 0
     a36:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <__muluhisi3>
     a3a:	a5 01       	movw	r20, r10
     a3c:	94 01       	movw	r18, r8
     a3e:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__divmodsi4>
     a42:	ba 01       	movw	r22, r20
     a44:	a9 01       	movw	r20, r18
     a46:	8a e0       	ldi	r24, 0x0A	; 10
     a48:	0e 94 76 01 	call	0x2ec	; 0x2ec <Num_to_PC>
     a4c:	85 e2       	ldi	r24, 0x25	; 37
     a4e:	0e 94 93 00 	call	0x126	; 0x126 <sendChar>
		newline();
     a52:	0e 94 ba 00 	call	0x174	; 0x174 <newline>
	Timer_T0_sub(T0_delay_20ms);}												//stops PC being overwhelmed with data
     a56:	64 e6       	ldi	r22, 0x64	; 100
     a58:	85 e0       	ldi	r24, 0x05	; 5
     a5a:	0e 94 c6 01 	call	0x38c	; 0x38c <Timer_T0_sub>

	newline();
	sendString("OSCCAL\t Error\r\n");


	for(int m = 0; m <= 40; m++)												//Print table of values
     a5e:	cc 15       	cp	r28, r12
     a60:	dd 05       	cpc	r29, r13
     a62:	61 f6       	brne	.-104    	; 0x9fc <Manual_cal+0xdc>
		percentage_error = buffer[m];
		Num_to_PC(10,percentage_error*100/62500);sendChar('%');
		newline();
	Timer_T0_sub(T0_delay_20ms);}												//stops PC being overwhelmed with data

	sendString("\r\nEnter new user cal value or x to escape.");
     a64:	84 e7       	ldi	r24, 0x74	; 116
     a66:	91 e0       	ldi	r25, 0x01	; 1
     a68:	0e 94 9b 00 	call	0x136	; 0x136 <sendString>


	UCSR0B |= (1 << RXEN0);														//keypresses required again
     a6c:	e1 ec       	ldi	r30, 0xC1	; 193
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	80 81       	ld	r24, Z
     a72:	80 61       	ori	r24, 0x10	; 16
     a74:	80 83       	st	Z, r24

	if ((OSCCAL_UV = UC_from_KBD()) == 'x')
     a76:	0e 94 9e 01 	call	0x33c	; 0x33c <UC_from_KBD>
     a7a:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <OSCCAL_UV>
     a7e:	88 37       	cpi	r24, 0x78	; 120
     a80:	29 f4       	brne	.+10     	; 0xa8c <Manual_cal+0x16c>
		OSCCAL_UV = OSCCAL_WV;													//stick with result of auto cal
     a82:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <OSCCAL_WV>
     a86:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <OSCCAL_UV>
     a8a:	46 c0       	rjmp	.+140    	; 0xb18 <Manual_cal+0x1f8>

	
	/*********************************************/
	else
		{Get_ready_to_calibrate;												//Test value of OSCCAL entered by user
     a8c:	00 e7       	ldi	r16, 0x70	; 112
     a8e:	10 e0       	ldi	r17, 0x00	; 0
     a90:	f8 01       	movw	r30, r16
     a92:	80 81       	ld	r24, Z
     a94:	81 60       	ori	r24, 0x01	; 1
     a96:	80 83       	st	Z, r24
     a98:	cf e6       	ldi	r28, 0x6F	; 111
     a9a:	d0 e0       	ldi	r29, 0x00	; 0
     a9c:	88 81       	ld	r24, Y
     a9e:	81 60       	ori	r24, 0x01	; 1
     aa0:	88 83       	st	Y, r24
     aa2:	0e 94 4d 02 	call	0x49a	; 0x49a <initialise_timers_for_cal_error>
     aa6:	0e 94 69 02 	call	0x4d2	; 0x4d2 <start_timers_for_cal_error>
		OSCCAL = OSCCAL_UV;														//Test new OSCCAL value
     aaa:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <OSCCAL_UV>
     aae:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
		calibrate_without_sign_plus_warm_up_time;
     ab2:	85 e0       	ldi	r24, 0x05	; 5
     ab4:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <cal_mode>
     ab8:	60 91 96 02 	lds	r22, 0x0296	; 0x800296 <cal_mode>
     abc:	40 e0       	ldi	r20, 0x00	; 0
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	0e 94 75 02 	call	0x4ea	; 0x4ea <compute_error>
     ac4:	60 91 96 02 	lds	r22, 0x0296	; 0x800296 <cal_mode>
     ac8:	40 e0       	ldi	r20, 0x00	; 0
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	0e 94 75 02 	call	0x4ea	; 0x4ea <compute_error>
     ad0:	60 91 96 02 	lds	r22, 0x0296	; 0x800296 <cal_mode>
     ad4:	40 e0       	ldi	r20, 0x00	; 0
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	0e 94 75 02 	call	0x4ea	; 0x4ea <compute_error>
     adc:	6b 01       	movw	r12, r22
     ade:	7c 01       	movw	r14, r24
		close_calibration;
     ae0:	0e 94 4d 02 	call	0x49a	; 0x49a <initialise_timers_for_cal_error>
     ae4:	f8 01       	movw	r30, r16
     ae6:	80 81       	ld	r24, Z
     ae8:	8e 7f       	andi	r24, 0xFE	; 254
     aea:	80 83       	st	Z, r24
     aec:	88 81       	ld	r24, Y
     aee:	8e 7f       	andi	r24, 0xFE	; 254
     af0:	88 83       	st	Y, r24

		if(cal_error > 1750)													//Error resulting from User OSCCAL exceeds 1750
     af2:	f7 ed       	ldi	r31, 0xD7	; 215
     af4:	cf 16       	cp	r12, r31
     af6:	f6 e0       	ldi	r31, 0x06	; 6
     af8:	df 06       	cpc	r13, r31
     afa:	e1 04       	cpc	r14, r1
     afc:	f1 04       	cpc	r15, r1
     afe:	64 f0       	brlt	.+24     	; 0xb18 <Manual_cal+0x1f8>
			{OSCCAL = OSCCAL_WV;												//Reinstate working value
     b00:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <OSCCAL_WV>
     b04:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
			OSCCAL_UV = OSCCAL_WV;
     b08:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <OSCCAL_WV>
     b0c:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <OSCCAL_UV>
			sendString("\tChange rejected: error too great");}}
     b10:	8f e9       	ldi	r24, 0x9F	; 159
     b12:	91 e0       	ldi	r25, 0x01	; 1
     b14:	0e 94 9b 00 	call	0x136	; 0x136 <sendString>


		cli();
     b18:	f8 94       	cli
		save_cal_values(OSCCAL_UV);
     b1a:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <OSCCAL_UV>
     b1e:	0e 94 f6 01 	call	0x3ec	; 0x3ec <save_cal_values>
	printout_cal_values();}
     b22:	0e 94 13 02 	call	0x426	; 0x426 <printout_cal_values>
     b26:	df 91       	pop	r29
     b28:	cf 91       	pop	r28
     b2a:	1f 91       	pop	r17
     b2c:	0f 91       	pop	r16
     b2e:	ff 90       	pop	r15
     b30:	ef 90       	pop	r14
     b32:	df 90       	pop	r13
     b34:	cf 90       	pop	r12
     b36:	bf 90       	pop	r11
     b38:	af 90       	pop	r10
     b3a:	9f 90       	pop	r9
     b3c:	8f 90       	pop	r8
     b3e:	08 95       	ret

00000b40 <main>:
int main (void)

{long error_up, error_down;
	int EEP_MAX = 0x2000;
	
	setup_HW;
     b40:	a8 95       	wdr
     b42:	84 b7       	in	r24, 0x34	; 52
     b44:	87 7f       	andi	r24, 0xF7	; 247
     b46:	84 bf       	out	0x34, r24	; 52
     b48:	e0 e6       	ldi	r30, 0x60	; 96
     b4a:	f0 e0       	ldi	r31, 0x00	; 0
     b4c:	80 81       	ld	r24, Z
     b4e:	88 61       	ori	r24, 0x18	; 24
     b50:	80 83       	st	Z, r24
     b52:	10 82       	st	Z, r1
     b54:	ec e7       	ldi	r30, 0x7C	; 124
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	80 81       	ld	r24, Z
     b5a:	80 64       	ori	r24, 0x40	; 64
     b5c:	80 83       	st	Z, r24
     b5e:	85 b7       	in	r24, 0x35	; 53
     b60:	8f 7e       	andi	r24, 0xEF	; 239
     b62:	85 bf       	out	0x35, r24	; 53
     b64:	14 b8       	out	0x04, r1	; 4
     b66:	17 b8       	out	0x07, r1	; 7
     b68:	1a b8       	out	0x0a, r1	; 10
     b6a:	8f ef       	ldi	r24, 0xFF	; 255
     b6c:	85 b9       	out	0x05, r24	; 5
     b6e:	88 b9       	out	0x08, r24	; 8
     b70:	8b b9       	out	0x0b, r24	; 11
     b72:	e9 e9       	ldi	r30, 0x99	; 153
     b74:	f2 e0       	ldi	r31, 0x02	; 2
     b76:	81 ec       	ldi	r24, 0xC1	; 193
     b78:	91 e0       	ldi	r25, 0x01	; 1
     b7a:	91 83       	std	Z+1, r25	; 0x01
     b7c:	80 83       	st	Z, r24
     b7e:	86 ec       	ldi	r24, 0xC6	; 198
     b80:	91 e0       	ldi	r25, 0x01	; 1
     b82:	93 83       	std	Z+3, r25	; 0x03
     b84:	82 83       	std	Z+2, r24	; 0x02
     b86:	8b ec       	ldi	r24, 0xCB	; 203
     b88:	91 e0       	ldi	r25, 0x01	; 1
     b8a:	95 83       	std	Z+5, r25	; 0x05
     b8c:	84 83       	std	Z+4, r24	; 0x04
     b8e:	81 ed       	ldi	r24, 0xD1	; 209
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	97 83       	std	Z+7, r25	; 0x07
     b94:	86 83       	std	Z+6, r24	; 0x06
     b96:	87 ed       	ldi	r24, 0xD7	; 215
     b98:	91 e0       	ldi	r25, 0x01	; 1
     b9a:	91 87       	std	Z+9, r25	; 0x09
     b9c:	80 87       	std	Z+8, r24	; 0x08
     b9e:	8b ed       	ldi	r24, 0xDB	; 219
     ba0:	91 e0       	ldi	r25, 0x01	; 1
     ba2:	93 87       	std	Z+11, r25	; 0x0b
     ba4:	82 87       	std	Z+10, r24	; 0x0a
     ba6:	8f ed       	ldi	r24, 0xDF	; 223
     ba8:	91 e0       	ldi	r25, 0x01	; 1
     baa:	95 87       	std	Z+13, r25	; 0x0d
     bac:	84 87       	std	Z+12, r24	; 0x0c
     bae:	e9 e6       	ldi	r30, 0x69	; 105
     bb0:	f3 e0       	ldi	r31, 0x03	; 3
     bb2:	8c e2       	ldi	r24, 0x2C	; 44
     bb4:	92 e0       	ldi	r25, 0x02	; 2
     bb6:	91 83       	std	Z+1, r25	; 0x01
     bb8:	80 83       	st	Z, r24
     bba:	83 ee       	ldi	r24, 0xE3	; 227
     bbc:	91 e0       	ldi	r25, 0x01	; 1
     bbe:	93 83       	std	Z+3, r25	; 0x03
     bc0:	82 83       	std	Z+2, r24	; 0x02
     bc2:	8c ef       	ldi	r24, 0xFC	; 252
     bc4:	9f e1       	ldi	r25, 0x1F	; 31
     bc6:	0e 94 2c 09 	call	0x1258	; 0x1258 <eeprom_read_byte>
     bca:	c8 2f       	mov	r28, r24
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	90 93 6e 03 	sts	0x036E, r25	; 0x80036e <sig_byte_2+0x1>
     bd2:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <sig_byte_2>
     bd6:	8b ef       	ldi	r24, 0xFB	; 251
     bd8:	9f e1       	ldi	r25, 0x1F	; 31
     bda:	0e 94 2c 09 	call	0x1258	; 0x1258 <eeprom_read_byte>
     bde:	28 2f       	mov	r18, r24
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	30 93 b1 02 	sts	0x02B1, r19	; 0x8002b1 <sig_byte_3+0x1>
     be6:	20 93 b0 02 	sts	0x02B0, r18	; 0x8002b0 <sig_byte_3>
     bea:	c4 39       	cpi	r28, 0x94	; 148
     bec:	09 f4       	brne	.+2      	; 0xbf0 <main+0xb0>
     bee:	52 c0       	rjmp	.+164    	; 0xc94 <main+0x154>
     bf0:	28 f4       	brcc	.+10     	; 0xbfc <main+0xbc>
     bf2:	c2 39       	cpi	r28, 0x92	; 146
     bf4:	51 f0       	breq	.+20     	; 0xc0a <main+0xca>
     bf6:	c3 39       	cpi	r28, 0x93	; 147
     bf8:	89 f1       	breq	.+98     	; 0xc5c <main+0x11c>
     bfa:	aa c0       	rjmp	.+340    	; 0xd50 <main+0x210>
     bfc:	c5 39       	cpi	r28, 0x95	; 149
     bfe:	09 f4       	brne	.+2      	; 0xc02 <main+0xc2>
     c00:	65 c0       	rjmp	.+202    	; 0xccc <main+0x18c>
     c02:	c6 39       	cpi	r28, 0x96	; 150
     c04:	09 f4       	brne	.+2      	; 0xc08 <main+0xc8>
     c06:	8b c0       	rjmp	.+278    	; 0xd1e <main+0x1de>
     c08:	a3 c0       	rjmp	.+326    	; 0xd50 <main+0x210>
     c0a:	40 e0       	ldi	r20, 0x00	; 0
     c0c:	58 e0       	ldi	r21, 0x08	; 8
     c0e:	50 93 af 02 	sts	0x02AF, r21	; 0x8002af <FlashSZ+0x1>
     c12:	40 93 ae 02 	sts	0x02AE, r20	; 0x8002ae <FlashSZ>
     c16:	40 e0       	ldi	r20, 0x00	; 0
     c18:	51 e0       	ldi	r21, 0x01	; 1
     c1a:	50 93 93 02 	sts	0x0293, r21	; 0x800293 <__data_end+0x1>
     c1e:	40 93 92 02 	sts	0x0292, r20	; 0x800292 <__data_end>
     c22:	87 30       	cpi	r24, 0x07	; 7
     c24:	71 f0       	breq	.+28     	; 0xc42 <main+0x102>
     c26:	8a 30       	cpi	r24, 0x0A	; 10
     c28:	19 f0       	breq	.+6      	; 0xc30 <main+0xf0>
     c2a:	85 30       	cpi	r24, 0x05	; 5
     c2c:	09 f0       	breq	.+2      	; 0xc30 <main+0xf0>
     c2e:	90 c0       	rjmp	.+288    	; 0xd50 <main+0x210>
     c30:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <device_ptr+0x1>
     c34:	10 92 a9 02 	sts	0x02A9, r1	; 0x8002a9 <device_ptr>
     c38:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <family_ptr+0x1>
     c3c:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <family_ptr>
     c40:	96 c0       	rjmp	.+300    	; 0xd6e <main+0x22e>
     c42:	86 e0       	ldi	r24, 0x06	; 6
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	90 93 aa 02 	sts	0x02AA, r25	; 0x8002aa <device_ptr+0x1>
     c4a:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <device_ptr>
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	90 93 95 02 	sts	0x0295, r25	; 0x800295 <family_ptr+0x1>
     c56:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <family_ptr>
     c5a:	89 c0       	rjmp	.+274    	; 0xd6e <main+0x22e>
     c5c:	40 e0       	ldi	r20, 0x00	; 0
     c5e:	50 e1       	ldi	r21, 0x10	; 16
     c60:	50 93 af 02 	sts	0x02AF, r21	; 0x8002af <FlashSZ+0x1>
     c64:	40 93 ae 02 	sts	0x02AE, r20	; 0x8002ae <FlashSZ>
     c68:	40 e0       	ldi	r20, 0x00	; 0
     c6a:	52 e0       	ldi	r21, 0x02	; 2
     c6c:	50 93 93 02 	sts	0x0293, r21	; 0x800293 <__data_end+0x1>
     c70:	40 93 92 02 	sts	0x0292, r20	; 0x800292 <__data_end>
     c74:	8a 30       	cpi	r24, 0x0A	; 10
     c76:	19 f0       	breq	.+6      	; 0xc7e <main+0x13e>
     c78:	8f 30       	cpi	r24, 0x0F	; 15
     c7a:	09 f0       	breq	.+2      	; 0xc7e <main+0x13e>
     c7c:	69 c0       	rjmp	.+210    	; 0xd50 <main+0x210>
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	90 93 aa 02 	sts	0x02AA, r25	; 0x8002aa <device_ptr+0x1>
     c86:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <device_ptr>
     c8a:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <family_ptr+0x1>
     c8e:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <family_ptr>
     c92:	6d c0       	rjmp	.+218    	; 0xd6e <main+0x22e>
     c94:	40 e0       	ldi	r20, 0x00	; 0
     c96:	50 e2       	ldi	r21, 0x20	; 32
     c98:	50 93 af 02 	sts	0x02AF, r21	; 0x8002af <FlashSZ+0x1>
     c9c:	40 93 ae 02 	sts	0x02AE, r20	; 0x8002ae <FlashSZ>
     ca0:	40 e0       	ldi	r20, 0x00	; 0
     ca2:	52 e0       	ldi	r21, 0x02	; 2
     ca4:	50 93 93 02 	sts	0x0293, r21	; 0x800293 <__data_end+0x1>
     ca8:	40 93 92 02 	sts	0x0292, r20	; 0x800292 <__data_end>
     cac:	86 30       	cpi	r24, 0x06	; 6
     cae:	19 f0       	breq	.+6      	; 0xcb6 <main+0x176>
     cb0:	8b 30       	cpi	r24, 0x0B	; 11
     cb2:	09 f0       	breq	.+2      	; 0xcb6 <main+0x176>
     cb4:	4d c0       	rjmp	.+154    	; 0xd50 <main+0x210>
     cb6:	82 e0       	ldi	r24, 0x02	; 2
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	90 93 aa 02 	sts	0x02AA, r25	; 0x8002aa <device_ptr+0x1>
     cbe:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <device_ptr>
     cc2:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <family_ptr+0x1>
     cc6:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <family_ptr>
     cca:	51 c0       	rjmp	.+162    	; 0xd6e <main+0x22e>
     ccc:	40 e0       	ldi	r20, 0x00	; 0
     cce:	50 e4       	ldi	r21, 0x40	; 64
     cd0:	50 93 af 02 	sts	0x02AF, r21	; 0x8002af <FlashSZ+0x1>
     cd4:	40 93 ae 02 	sts	0x02AE, r20	; 0x8002ae <FlashSZ>
     cd8:	40 e0       	ldi	r20, 0x00	; 0
     cda:	54 e0       	ldi	r21, 0x04	; 4
     cdc:	50 93 93 02 	sts	0x0293, r21	; 0x800293 <__data_end+0x1>
     ce0:	40 93 92 02 	sts	0x0292, r20	; 0x800292 <__data_end>
     ce4:	8f 30       	cpi	r24, 0x0F	; 15
     ce6:	29 f0       	breq	.+10     	; 0xcf2 <main+0x1b2>
     ce8:	84 31       	cpi	r24, 0x14	; 20
     cea:	19 f0       	breq	.+6      	; 0xcf2 <main+0x1b2>
     cec:	82 30       	cpi	r24, 0x02	; 2
     cee:	81 f5       	brne	.+96     	; 0xd50 <main+0x210>
     cf0:	0b c0       	rjmp	.+22     	; 0xd08 <main+0x1c8>
     cf2:	83 e0       	ldi	r24, 0x03	; 3
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	90 93 aa 02 	sts	0x02AA, r25	; 0x8002aa <device_ptr+0x1>
     cfa:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <device_ptr>
     cfe:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <family_ptr+0x1>
     d02:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <family_ptr>
     d06:	26 c0       	rjmp	.+76     	; 0xd54 <main+0x214>
     d08:	85 e0       	ldi	r24, 0x05	; 5
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	90 93 aa 02 	sts	0x02AA, r25	; 0x8002aa <device_ptr+0x1>
     d10:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <device_ptr>
     d14:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <family_ptr+0x1>
     d18:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <family_ptr>
     d1c:	1b c0       	rjmp	.+54     	; 0xd54 <main+0x214>
     d1e:	40 e0       	ldi	r20, 0x00	; 0
     d20:	50 e8       	ldi	r21, 0x80	; 128
     d22:	50 93 af 02 	sts	0x02AF, r21	; 0x8002af <FlashSZ+0x1>
     d26:	40 93 ae 02 	sts	0x02AE, r20	; 0x8002ae <FlashSZ>
     d2a:	40 e0       	ldi	r20, 0x00	; 0
     d2c:	58 e0       	ldi	r21, 0x08	; 8
     d2e:	50 93 93 02 	sts	0x0293, r21	; 0x800293 <__data_end+0x1>
     d32:	40 93 92 02 	sts	0x0292, r20	; 0x800292 <__data_end>
     d36:	89 30       	cpi	r24, 0x09	; 9
     d38:	59 f4       	brne	.+22     	; 0xd50 <main+0x210>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	90 93 aa 02 	sts	0x02AA, r25	; 0x8002aa <device_ptr+0x1>
     d42:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <device_ptr>
     d46:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <family_ptr+0x1>
     d4a:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <family_ptr>
     d4e:	0f c0       	rjmp	.+30     	; 0xd6e <main+0x22e>
     d50:	c5 39       	cpi	r28, 0x95	; 149
     d52:	69 f4       	brne	.+26     	; 0xd6e <main+0x22e>
     d54:	22 30       	cpi	r18, 0x02	; 2
     d56:	31 05       	cpc	r19, r1
     d58:	29 f0       	breq	.+10     	; 0xd64 <main+0x224>
     d5a:	69 e1       	ldi	r22, 0x19	; 25
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	0e 94 db 01 	call	0x3b6	; 0x3b6 <USART_init>
     d62:	09 c0       	rjmp	.+18     	; 0xd76 <main+0x236>
     d64:	69 e1       	ldi	r22, 0x19	; 25
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_init_32>
     d6c:	04 c0       	rjmp	.+8      	; 0xd76 <main+0x236>
     d6e:	69 e1       	ldi	r22, 0x19	; 25
     d70:	80 e0       	ldi	r24, 0x00	; 0
     d72:	0e 94 db 01 	call	0x3b6	; 0x3b6 <USART_init>

	ASSR = (1 << AS2);																//initialise T2 for crystal
     d76:	80 e2       	ldi	r24, 0x20	; 32
     d78:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__DATA_REGION_ORIGIN__+0x56>
	OSCCAL_DV = OSCCAL;																//Save default value off OSCCAL
     d7c:	c6 e6       	ldi	r28, 0x66	; 102
     d7e:	d0 e0       	ldi	r29, 0x00	; 0
     d80:	88 81       	ld	r24, Y
     d82:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <OSCCAL_DV>

	Auto_cal (0);																	//Search starting from 0xF0
     d86:	80 e0       	ldi	r24, 0x00	; 0
     d88:	0e 94 a4 03 	call	0x748	; 0x748 <Auto_cal>
	OSCCAL += 1;																	//Check performance for OSCCAL_WV +/- 1
     d8c:	88 81       	ld	r24, Y
     d8e:	8f 5f       	subi	r24, 0xFF	; 255
     d90:	88 83       	st	Y, r24
	Get_ready_to_calibrate;
     d92:	0f 2e       	mov	r0, r31
     d94:	f0 e7       	ldi	r31, 0x70	; 112
     d96:	ef 2e       	mov	r14, r31
     d98:	f1 2c       	mov	r15, r1
     d9a:	f0 2d       	mov	r31, r0
     d9c:	f7 01       	movw	r30, r14
     d9e:	80 81       	ld	r24, Z
     da0:	81 60       	ori	r24, 0x01	; 1
     da2:	80 83       	st	Z, r24
     da4:	0f e6       	ldi	r16, 0x6F	; 111
     da6:	10 e0       	ldi	r17, 0x00	; 0
     da8:	f8 01       	movw	r30, r16
     daa:	80 81       	ld	r24, Z
     dac:	81 60       	ori	r24, 0x01	; 1
     dae:	80 83       	st	Z, r24
     db0:	0e 94 4d 02 	call	0x49a	; 0x49a <initialise_timers_for_cal_error>
     db4:	0e 94 69 02 	call	0x4d2	; 0x4d2 <start_timers_for_cal_error>
	sei();
     db8:	78 94       	sei
	error_up = compute_error(0,2,0);												//Check that OSCCAL_WV is not at a
     dba:	40 e0       	ldi	r20, 0x00	; 0
     dbc:	62 e0       	ldi	r22, 0x02	; 2
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	0e 94 75 02 	call	0x4ea	; 0x4ea <compute_error>
     dc4:	2b 01       	movw	r4, r22
     dc6:	3c 01       	movw	r6, r24
	OSCCAL -=2; error_down = compute_error(0,2,0);									//discontinuity on the
     dc8:	88 81       	ld	r24, Y
     dca:	82 50       	subi	r24, 0x02	; 2
     dcc:	88 83       	st	Y, r24
     dce:	40 e0       	ldi	r20, 0x00	; 0
     dd0:	62 e0       	ldi	r22, 0x02	; 2
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	0e 94 75 02 	call	0x4ea	; 0x4ea <compute_error>
     dd8:	4b 01       	movw	r8, r22
     dda:	5c 01       	movw	r10, r24
	close_calibration;																//OSCCAL v error plot
     ddc:	0e 94 4d 02 	call	0x49a	; 0x49a <initialise_timers_for_cal_error>
     de0:	f7 01       	movw	r30, r14
     de2:	80 81       	ld	r24, Z
     de4:	8e 7f       	andi	r24, 0xFE	; 254
     de6:	80 83       	st	Z, r24
     de8:	f8 01       	movw	r30, r16
     dea:	80 81       	ld	r24, Z
     dec:	8e 7f       	andi	r24, 0xFE	; 254
     dee:	80 83       	st	Z, r24
	cli();
     df0:	f8 94       	cli
	OSCCAL += 1;																	//Restore OSCCAL to OSCCAL_WV
     df2:	88 81       	ld	r24, Y
     df4:	8f 5f       	subi	r24, 0xFF	; 255
     df6:	88 83       	st	Y, r24
	if ((error_up > 1000) || (error_down > 1000))
     df8:	f9 ee       	ldi	r31, 0xE9	; 233
     dfa:	4f 16       	cp	r4, r31
     dfc:	f3 e0       	ldi	r31, 0x03	; 3
     dfe:	5f 06       	cpc	r5, r31
     e00:	61 04       	cpc	r6, r1
     e02:	71 04       	cpc	r7, r1
     e04:	3c f4       	brge	.+14     	; 0xe14 <main+0x2d4>
     e06:	89 ee       	ldi	r24, 0xE9	; 233
     e08:	88 16       	cp	r8, r24
     e0a:	83 e0       	ldi	r24, 0x03	; 3
     e0c:	98 06       	cpc	r9, r24
     e0e:	a1 04       	cpc	r10, r1
     e10:	b1 04       	cpc	r11, r1
     e12:	3c f0       	brlt	.+14     	; 0xe22 <main+0x2e2>
	{sendString("\r\nPoor result: Searching for alternative value\r\n");
     e14:	8b ee       	ldi	r24, 0xEB	; 235
     e16:	91 e0       	ldi	r25, 0x01	; 1
     e18:	0e 94 9b 00 	call	0x136	; 0x136 <sendString>
	Auto_cal (1);}																	//Repeat search starting from 0x10
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	0e 94 a4 03 	call	0x748	; 0x748 <Auto_cal>
	
	set_device_type_and_memory_size;
     e22:	e9 e9       	ldi	r30, 0x99	; 153
     e24:	f2 e0       	ldi	r31, 0x02	; 2
     e26:	81 ec       	ldi	r24, 0xC1	; 193
     e28:	91 e0       	ldi	r25, 0x01	; 1
     e2a:	91 83       	std	Z+1, r25	; 0x01
     e2c:	80 83       	st	Z, r24
     e2e:	86 ec       	ldi	r24, 0xC6	; 198
     e30:	91 e0       	ldi	r25, 0x01	; 1
     e32:	93 83       	std	Z+3, r25	; 0x03
     e34:	82 83       	std	Z+2, r24	; 0x02
     e36:	8b ec       	ldi	r24, 0xCB	; 203
     e38:	91 e0       	ldi	r25, 0x01	; 1
     e3a:	95 83       	std	Z+5, r25	; 0x05
     e3c:	84 83       	std	Z+4, r24	; 0x04
     e3e:	81 ed       	ldi	r24, 0xD1	; 209
     e40:	91 e0       	ldi	r25, 0x01	; 1
     e42:	97 83       	std	Z+7, r25	; 0x07
     e44:	86 83       	std	Z+6, r24	; 0x06
     e46:	87 ed       	ldi	r24, 0xD7	; 215
     e48:	91 e0       	ldi	r25, 0x01	; 1
     e4a:	91 87       	std	Z+9, r25	; 0x09
     e4c:	80 87       	std	Z+8, r24	; 0x08
     e4e:	8b ed       	ldi	r24, 0xDB	; 219
     e50:	91 e0       	ldi	r25, 0x01	; 1
     e52:	93 87       	std	Z+11, r25	; 0x0b
     e54:	82 87       	std	Z+10, r24	; 0x0a
     e56:	8f ed       	ldi	r24, 0xDF	; 223
     e58:	91 e0       	ldi	r25, 0x01	; 1
     e5a:	95 87       	std	Z+13, r25	; 0x0d
     e5c:	84 87       	std	Z+12, r24	; 0x0c
     e5e:	e9 e6       	ldi	r30, 0x69	; 105
     e60:	f3 e0       	ldi	r31, 0x03	; 3
     e62:	8c e2       	ldi	r24, 0x2C	; 44
     e64:	92 e0       	ldi	r25, 0x02	; 2
     e66:	91 83       	std	Z+1, r25	; 0x01
     e68:	80 83       	st	Z, r24
     e6a:	83 ee       	ldi	r24, 0xE3	; 227
     e6c:	91 e0       	ldi	r25, 0x01	; 1
     e6e:	93 83       	std	Z+3, r25	; 0x03
     e70:	82 83       	std	Z+2, r24	; 0x02
     e72:	8c ef       	ldi	r24, 0xFC	; 252
     e74:	9f e1       	ldi	r25, 0x1F	; 31
     e76:	0e 94 2c 09 	call	0x1258	; 0x1258 <eeprom_read_byte>
     e7a:	c8 2f       	mov	r28, r24
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	90 93 6e 03 	sts	0x036E, r25	; 0x80036e <sig_byte_2+0x1>
     e82:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <sig_byte_2>
     e86:	8b ef       	ldi	r24, 0xFB	; 251
     e88:	9f e1       	ldi	r25, 0x1F	; 31
     e8a:	0e 94 2c 09 	call	0x1258	; 0x1258 <eeprom_read_byte>
     e8e:	28 2f       	mov	r18, r24
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	30 93 b1 02 	sts	0x02B1, r19	; 0x8002b1 <sig_byte_3+0x1>
     e96:	20 93 b0 02 	sts	0x02B0, r18	; 0x8002b0 <sig_byte_3>
     e9a:	c4 39       	cpi	r28, 0x94	; 148
     e9c:	09 f4       	brne	.+2      	; 0xea0 <main+0x360>
     e9e:	52 c0       	rjmp	.+164    	; 0xf44 <main+0x404>
     ea0:	28 f4       	brcc	.+10     	; 0xeac <main+0x36c>
     ea2:	c2 39       	cpi	r28, 0x92	; 146
     ea4:	51 f0       	breq	.+20     	; 0xeba <main+0x37a>
     ea6:	c3 39       	cpi	r28, 0x93	; 147
     ea8:	89 f1       	breq	.+98     	; 0xf0c <main+0x3cc>
     eaa:	a9 c0       	rjmp	.+338    	; 0xffe <main+0x4be>
     eac:	c5 39       	cpi	r28, 0x95	; 149
     eae:	09 f4       	brne	.+2      	; 0xeb2 <main+0x372>
     eb0:	65 c0       	rjmp	.+202    	; 0xf7c <main+0x43c>
     eb2:	c6 39       	cpi	r28, 0x96	; 150
     eb4:	09 f4       	brne	.+2      	; 0xeb8 <main+0x378>
     eb6:	8b c0       	rjmp	.+278    	; 0xfce <main+0x48e>
     eb8:	a2 c0       	rjmp	.+324    	; 0xffe <main+0x4be>
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	38 e0       	ldi	r19, 0x08	; 8
     ebe:	30 93 af 02 	sts	0x02AF, r19	; 0x8002af <FlashSZ+0x1>
     ec2:	20 93 ae 02 	sts	0x02AE, r18	; 0x8002ae <FlashSZ>
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	31 e0       	ldi	r19, 0x01	; 1
     eca:	30 93 93 02 	sts	0x0293, r19	; 0x800293 <__data_end+0x1>
     ece:	20 93 92 02 	sts	0x0292, r18	; 0x800292 <__data_end>
     ed2:	87 30       	cpi	r24, 0x07	; 7
     ed4:	71 f0       	breq	.+28     	; 0xef2 <main+0x3b2>
     ed6:	8a 30       	cpi	r24, 0x0A	; 10
     ed8:	19 f0       	breq	.+6      	; 0xee0 <main+0x3a0>
     eda:	85 30       	cpi	r24, 0x05	; 5
     edc:	09 f0       	breq	.+2      	; 0xee0 <main+0x3a0>
     ede:	8f c0       	rjmp	.+286    	; 0xffe <main+0x4be>
     ee0:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <device_ptr+0x1>
     ee4:	10 92 a9 02 	sts	0x02A9, r1	; 0x8002a9 <device_ptr>
     ee8:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <family_ptr+0x1>
     eec:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <family_ptr>
     ef0:	86 c0       	rjmp	.+268    	; 0xffe <main+0x4be>
     ef2:	86 e0       	ldi	r24, 0x06	; 6
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	90 93 aa 02 	sts	0x02AA, r25	; 0x8002aa <device_ptr+0x1>
     efa:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <device_ptr>
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	90 93 95 02 	sts	0x0295, r25	; 0x800295 <family_ptr+0x1>
     f06:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <family_ptr>
     f0a:	79 c0       	rjmp	.+242    	; 0xffe <main+0x4be>
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	30 e1       	ldi	r19, 0x10	; 16
     f10:	30 93 af 02 	sts	0x02AF, r19	; 0x8002af <FlashSZ+0x1>
     f14:	20 93 ae 02 	sts	0x02AE, r18	; 0x8002ae <FlashSZ>
     f18:	20 e0       	ldi	r18, 0x00	; 0
     f1a:	32 e0       	ldi	r19, 0x02	; 2
     f1c:	30 93 93 02 	sts	0x0293, r19	; 0x800293 <__data_end+0x1>
     f20:	20 93 92 02 	sts	0x0292, r18	; 0x800292 <__data_end>
     f24:	8a 30       	cpi	r24, 0x0A	; 10
     f26:	19 f0       	breq	.+6      	; 0xf2e <main+0x3ee>
     f28:	8f 30       	cpi	r24, 0x0F	; 15
     f2a:	09 f0       	breq	.+2      	; 0xf2e <main+0x3ee>
     f2c:	68 c0       	rjmp	.+208    	; 0xffe <main+0x4be>
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	90 93 aa 02 	sts	0x02AA, r25	; 0x8002aa <device_ptr+0x1>
     f36:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <device_ptr>
     f3a:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <family_ptr+0x1>
     f3e:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <family_ptr>
     f42:	5d c0       	rjmp	.+186    	; 0xffe <main+0x4be>
     f44:	20 e0       	ldi	r18, 0x00	; 0
     f46:	30 e2       	ldi	r19, 0x20	; 32
     f48:	30 93 af 02 	sts	0x02AF, r19	; 0x8002af <FlashSZ+0x1>
     f4c:	20 93 ae 02 	sts	0x02AE, r18	; 0x8002ae <FlashSZ>
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	32 e0       	ldi	r19, 0x02	; 2
     f54:	30 93 93 02 	sts	0x0293, r19	; 0x800293 <__data_end+0x1>
     f58:	20 93 92 02 	sts	0x0292, r18	; 0x800292 <__data_end>
     f5c:	86 30       	cpi	r24, 0x06	; 6
     f5e:	19 f0       	breq	.+6      	; 0xf66 <main+0x426>
     f60:	8b 30       	cpi	r24, 0x0B	; 11
     f62:	09 f0       	breq	.+2      	; 0xf66 <main+0x426>
     f64:	4c c0       	rjmp	.+152    	; 0xffe <main+0x4be>
     f66:	82 e0       	ldi	r24, 0x02	; 2
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	90 93 aa 02 	sts	0x02AA, r25	; 0x8002aa <device_ptr+0x1>
     f6e:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <device_ptr>
     f72:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <family_ptr+0x1>
     f76:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <family_ptr>
     f7a:	41 c0       	rjmp	.+130    	; 0xffe <main+0x4be>
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	30 e4       	ldi	r19, 0x40	; 64
     f80:	30 93 af 02 	sts	0x02AF, r19	; 0x8002af <FlashSZ+0x1>
     f84:	20 93 ae 02 	sts	0x02AE, r18	; 0x8002ae <FlashSZ>
     f88:	20 e0       	ldi	r18, 0x00	; 0
     f8a:	34 e0       	ldi	r19, 0x04	; 4
     f8c:	30 93 93 02 	sts	0x0293, r19	; 0x800293 <__data_end+0x1>
     f90:	20 93 92 02 	sts	0x0292, r18	; 0x800292 <__data_end>
     f94:	8f 30       	cpi	r24, 0x0F	; 15
     f96:	29 f0       	breq	.+10     	; 0xfa2 <main+0x462>
     f98:	84 31       	cpi	r24, 0x14	; 20
     f9a:	19 f0       	breq	.+6      	; 0xfa2 <main+0x462>
     f9c:	82 30       	cpi	r24, 0x02	; 2
     f9e:	79 f5       	brne	.+94     	; 0xffe <main+0x4be>
     fa0:	0b c0       	rjmp	.+22     	; 0xfb8 <main+0x478>
     fa2:	83 e0       	ldi	r24, 0x03	; 3
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	90 93 aa 02 	sts	0x02AA, r25	; 0x8002aa <device_ptr+0x1>
     faa:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <device_ptr>
     fae:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <family_ptr+0x1>
     fb2:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <family_ptr>
     fb6:	23 c0       	rjmp	.+70     	; 0xffe <main+0x4be>
     fb8:	85 e0       	ldi	r24, 0x05	; 5
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	90 93 aa 02 	sts	0x02AA, r25	; 0x8002aa <device_ptr+0x1>
     fc0:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <device_ptr>
     fc4:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <family_ptr+0x1>
     fc8:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <family_ptr>
     fcc:	18 c0       	rjmp	.+48     	; 0xffe <main+0x4be>
     fce:	20 e0       	ldi	r18, 0x00	; 0
     fd0:	30 e8       	ldi	r19, 0x80	; 128
     fd2:	30 93 af 02 	sts	0x02AF, r19	; 0x8002af <FlashSZ+0x1>
     fd6:	20 93 ae 02 	sts	0x02AE, r18	; 0x8002ae <FlashSZ>
     fda:	20 e0       	ldi	r18, 0x00	; 0
     fdc:	38 e0       	ldi	r19, 0x08	; 8
     fde:	30 93 93 02 	sts	0x0293, r19	; 0x800293 <__data_end+0x1>
     fe2:	20 93 92 02 	sts	0x0292, r18	; 0x800292 <__data_end>
     fe6:	89 30       	cpi	r24, 0x09	; 9
     fe8:	51 f4       	brne	.+20     	; 0xffe <main+0x4be>
     fea:	84 e0       	ldi	r24, 0x04	; 4
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	90 93 aa 02 	sts	0x02AA, r25	; 0x8002aa <device_ptr+0x1>
     ff2:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <device_ptr>
     ff6:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <family_ptr+0x1>
     ffa:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <family_ptr>
	sendString("\r\n\r\nCalibrating Atmega ");
     ffe:	8c e1       	ldi	r24, 0x1C	; 28
    1000:	92 e0       	ldi	r25, 0x02	; 2
    1002:	0e 94 9b 00 	call	0x136	; 0x136 <sendString>
	sendString (Device_type[device_ptr]);
    1006:	e0 91 a9 02 	lds	r30, 0x02A9	; 0x8002a9 <device_ptr>
    100a:	f0 91 aa 02 	lds	r31, 0x02AA	; 0x8002aa <device_ptr+0x1>
    100e:	ee 0f       	add	r30, r30
    1010:	ff 1f       	adc	r31, r31
    1012:	e7 56       	subi	r30, 0x67	; 103
    1014:	fd 4f       	sbci	r31, 0xFD	; 253
    1016:	80 81       	ld	r24, Z
    1018:	91 81       	ldd	r25, Z+1	; 0x01
    101a:	0e 94 9b 00 	call	0x136	; 0x136 <sendString>
	
	save_cal_values(OSCCAL_WV);														//Save result of the auto calibration
    101e:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <OSCCAL_WV>
    1022:	0e 94 f6 01 	call	0x3ec	; 0x3ec <save_cal_values>

	sendString("\r\nNew OSCCAL value ");
    1026:	84 e3       	ldi	r24, 0x34	; 52
    1028:	92 e0       	ldi	r25, 0x02	; 2
    102a:	0e 94 9b 00 	call	0x136	; 0x136 <sendString>
	Num_to_PC(10,OSCCAL_WV);
    102e:	40 91 ab 02 	lds	r20, 0x02AB	; 0x8002ab <OSCCAL_WV>
    1032:	50 e0       	ldi	r21, 0x00	; 0
    1034:	60 e0       	ldi	r22, 0x00	; 0
    1036:	70 e0       	ldi	r23, 0x00	; 0
    1038:	8a e0       	ldi	r24, 0x0A	; 10
    103a:	0e 94 76 01 	call	0x2ec	; 0x2ec <Num_to_PC>

	sendString("\r\nPress 'x' to finish or AOK for manual cal\r\n");				//Omit for 4K device
    103e:	88 e4       	ldi	r24, 0x48	; 72
    1040:	92 e0       	ldi	r25, 0x02	; 2
    1042:	0e 94 9b 00 	call	0x136	; 0x136 <sendString>
	if (waitforkeypress() == 'x')													//Omit for 4K device
    1046:	0e 94 63 00 	call	0xc6	; 0xc6 <waitforkeypress>
    104a:	88 37       	cpi	r24, 0x78	; 120
    104c:	19 f4       	brne	.+6      	; 0x1054 <main+0x514>
		{printout_cal_values();}
    104e:	0e 94 13 02 	call	0x426	; 0x426 <printout_cal_values>
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <main+0x518>
	

	else Manual_cal();															//Omit for 4K device
    1054:	0e 94 90 04 	call	0x920	; 0x920 <Manual_cal>

	sendString("\r\nAll done: AK to repeat.\r\n");
    1058:	86 e7       	ldi	r24, 0x76	; 118
    105a:	92 e0       	ldi	r25, 0x02	; 2
    105c:	0e 94 9b 00 	call	0x136	; 0x136 <sendString>

	waitforkeypress();
    1060:	0e 94 63 00 	call	0xc6	; 0xc6 <waitforkeypress>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    1064:	99 e0       	ldi	r25, 0x09	; 9
    1066:	88 e1       	ldi	r24, 0x18	; 24
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	f8 94       	cli
    106c:	a8 95       	wdr
    106e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    1072:	0f be       	out	0x3f, r0	; 63
    1074:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
    1078:	ff cf       	rjmp	.-2      	; 0x1078 <main+0x538>

0000107a <__vector_9>:




	/*************************************************************************************************************************************/
	ISR(TIMER2_OVF_vect) {
    107a:	1f 92       	push	r1
    107c:	0f 92       	push	r0
    107e:	0f b6       	in	r0, 0x3f	; 63
    1080:	0f 92       	push	r0
    1082:	11 24       	eor	r1, r1
    1084:	cf 92       	push	r12
    1086:	df 92       	push	r13
    1088:	ef 92       	push	r14
    108a:	ff 92       	push	r15
    108c:	2f 93       	push	r18
    108e:	3f 93       	push	r19
    1090:	4f 93       	push	r20
    1092:	5f 93       	push	r21
    1094:	6f 93       	push	r22
    1096:	7f 93       	push	r23
    1098:	8f 93       	push	r24
    109a:	9f 93       	push	r25
    109c:	af 93       	push	r26
    109e:	bf 93       	push	r27
    10a0:	ef 93       	push	r30
    10a2:	ff 93       	push	r31
		long TCNT1_BKP, overflow = 0, target_res;

		target_res = 62500;
		TCCR1B = 0;																	//Halt T1
    10a4:	e1 e8       	ldi	r30, 0x81	; 129
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	10 82       	st	Z, r1
		TCNT1_BKP = TCNT1;															//Copy the value of TCNT1
    10aa:	a4 e8       	ldi	r26, 0x84	; 132
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	2d 91       	ld	r18, X+
    10b0:	3c 91       	ld	r19, X
    10b2:	11 97       	sbiw	r26, 0x01	; 1
		TCNT1 = 0;																	//Clear TCNT1
    10b4:	11 96       	adiw	r26, 0x01	; 1
    10b6:	1c 92       	st	X, r1
    10b8:	1e 92       	st	-X, r1
		TCCR1B = 1;																	//Get T1 running again ASAP (Note T2 has not stopped running)
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	80 83       	st	Z, r24
		
		if(EA_counter < cal_mode)T1_OVF = 0;										 //Ignore first few results
    10be:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <cal_mode>
    10c2:	40 91 ac 02 	lds	r20, 0x02AC	; 0x8002ac <EA_counter>
    10c6:	50 91 ad 02 	lds	r21, 0x02AD	; 0x8002ad <EA_counter+0x1>
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	48 17       	cp	r20, r24
    10ce:	59 07       	cpc	r21, r25
    10d0:	1c f4       	brge	.+6      	; 0x10d8 <__vector_9+0x5e>
    10d2:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <T1_OVF>
    10d6:	36 c0       	rjmp	.+108    	; 0x1144 <__vector_9+0xca>
		else
		{
			switch(T1_OVF){
    10d8:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <T1_OVF>
    10dc:	81 30       	cpi	r24, 0x01	; 1
    10de:	19 f0       	breq	.+6      	; 0x10e6 <__vector_9+0x6c>
    10e0:	82 30       	cpi	r24, 0x02	; 2
    10e2:	31 f0       	breq	.+12     	; 0x10f0 <__vector_9+0x76>
    10e4:	0b c0       	rjmp	.+22     	; 0x10fc <__vector_9+0x82>
				case 0: overflow = 0; break;
				case 1: overflow = 65536; break;
    10e6:	c1 2c       	mov	r12, r1
    10e8:	d1 2c       	mov	r13, r1
    10ea:	76 01       	movw	r14, r12
    10ec:	e3 94       	inc	r14
    10ee:	09 c0       	rjmp	.+18     	; 0x1102 <__vector_9+0x88>
			case 2: overflow = 131072; break;}
    10f0:	c1 2c       	mov	r12, r1
    10f2:	d1 2c       	mov	r13, r1
    10f4:	76 01       	movw	r14, r12
    10f6:	68 94       	set
    10f8:	e1 f8       	bld	r14, 1
    10fa:	03 c0       	rjmp	.+6      	; 0x1102 <__vector_9+0x88>



	/*************************************************************************************************************************************/
	ISR(TIMER2_OVF_vect) {
		long TCNT1_BKP, overflow = 0, target_res;
    10fc:	c1 2c       	mov	r12, r1
    10fe:	d1 2c       	mov	r13, r1
    1100:	76 01       	movw	r14, r12
		{
			switch(T1_OVF){
				case 0: overflow = 0; break;
				case 1: overflow = 65536; break;
			case 2: overflow = 131072; break;}
			error_SUM = error_SUM + (TCNT1_BKP - target_res + overflow);
    1102:	40 91 6f 03 	lds	r20, 0x036F	; 0x80036f <error_SUM>
    1106:	50 91 70 03 	lds	r21, 0x0370	; 0x800370 <error_SUM+0x1>
    110a:	60 91 71 03 	lds	r22, 0x0371	; 0x800371 <error_SUM+0x2>
    110e:	70 91 72 03 	lds	r23, 0x0372	; 0x800372 <error_SUM+0x3>
    1112:	c9 01       	movw	r24, r18
    1114:	a0 e0       	ldi	r26, 0x00	; 0
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	84 52       	subi	r24, 0x24	; 36
    111a:	94 4f       	sbci	r25, 0xF4	; 244
    111c:	a1 09       	sbc	r26, r1
    111e:	b1 09       	sbc	r27, r1
    1120:	8c 0d       	add	r24, r12
    1122:	9d 1d       	adc	r25, r13
    1124:	ae 1d       	adc	r26, r14
    1126:	bf 1d       	adc	r27, r15
    1128:	84 0f       	add	r24, r20
    112a:	95 1f       	adc	r25, r21
    112c:	a6 1f       	adc	r26, r22
    112e:	b7 1f       	adc	r27, r23
    1130:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <error_SUM>
    1134:	90 93 70 03 	sts	0x0370, r25	; 0x800370 <error_SUM+0x1>
    1138:	a0 93 71 03 	sts	0x0371, r26	; 0x800371 <error_SUM+0x2>
    113c:	b0 93 72 03 	sts	0x0372, r27	; 0x800372 <error_SUM+0x3>
		T1_OVF = 0;}
    1140:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <T1_OVF>
	EA_counter++;}
    1144:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <EA_counter>
    1148:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <EA_counter+0x1>
    114c:	01 96       	adiw	r24, 0x01	; 1
    114e:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <EA_counter+0x1>
    1152:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <EA_counter>
    1156:	ff 91       	pop	r31
    1158:	ef 91       	pop	r30
    115a:	bf 91       	pop	r27
    115c:	af 91       	pop	r26
    115e:	9f 91       	pop	r25
    1160:	8f 91       	pop	r24
    1162:	7f 91       	pop	r23
    1164:	6f 91       	pop	r22
    1166:	5f 91       	pop	r21
    1168:	4f 91       	pop	r20
    116a:	3f 91       	pop	r19
    116c:	2f 91       	pop	r18
    116e:	ff 90       	pop	r15
    1170:	ef 90       	pop	r14
    1172:	df 90       	pop	r13
    1174:	cf 90       	pop	r12
    1176:	0f 90       	pop	r0
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	0f 90       	pop	r0
    117c:	1f 90       	pop	r1
    117e:	18 95       	reti

00001180 <__vector_13>:




	/************************************************************************************************************************************/
    1180:	1f 92       	push	r1
    1182:	0f 92       	push	r0
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	0f 92       	push	r0
    1188:	11 24       	eor	r1, r1
    118a:	8f 93       	push	r24
    118c:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <T1_OVF>
    1190:	8f 5f       	subi	r24, 0xFF	; 255
    1192:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <T1_OVF>
    1196:	8f 91       	pop	r24
    1198:	0f 90       	pop	r0
    119a:	0f be       	out	0x3f, r0	; 63
    119c:	0f 90       	pop	r0
    119e:	1f 90       	pop	r1
    11a0:	18 95       	reti

000011a2 <__divmodsi4>:
    11a2:	05 2e       	mov	r0, r21
    11a4:	97 fb       	bst	r25, 7
    11a6:	1e f4       	brtc	.+6      	; 0x11ae <__divmodsi4+0xc>
    11a8:	00 94       	com	r0
    11aa:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <__negsi2>
    11ae:	57 fd       	sbrc	r21, 7
    11b0:	07 d0       	rcall	.+14     	; 0x11c0 <__divmodsi4_neg2>
    11b2:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__udivmodsi4>
    11b6:	07 fc       	sbrc	r0, 7
    11b8:	03 d0       	rcall	.+6      	; 0x11c0 <__divmodsi4_neg2>
    11ba:	4e f4       	brtc	.+18     	; 0x11ce <__divmodsi4_exit>
    11bc:	0c 94 e8 08 	jmp	0x11d0	; 0x11d0 <__negsi2>

000011c0 <__divmodsi4_neg2>:
    11c0:	50 95       	com	r21
    11c2:	40 95       	com	r20
    11c4:	30 95       	com	r19
    11c6:	21 95       	neg	r18
    11c8:	3f 4f       	sbci	r19, 0xFF	; 255
    11ca:	4f 4f       	sbci	r20, 0xFF	; 255
    11cc:	5f 4f       	sbci	r21, 0xFF	; 255

000011ce <__divmodsi4_exit>:
    11ce:	08 95       	ret

000011d0 <__negsi2>:
    11d0:	90 95       	com	r25
    11d2:	80 95       	com	r24
    11d4:	70 95       	com	r23
    11d6:	61 95       	neg	r22
    11d8:	7f 4f       	sbci	r23, 0xFF	; 255
    11da:	8f 4f       	sbci	r24, 0xFF	; 255
    11dc:	9f 4f       	sbci	r25, 0xFF	; 255
    11de:	08 95       	ret

000011e0 <__muluhisi3>:
    11e0:	0e 94 1d 09 	call	0x123a	; 0x123a <__umulhisi3>
    11e4:	a5 9f       	mul	r26, r21
    11e6:	90 0d       	add	r25, r0
    11e8:	b4 9f       	mul	r27, r20
    11ea:	90 0d       	add	r25, r0
    11ec:	a4 9f       	mul	r26, r20
    11ee:	80 0d       	add	r24, r0
    11f0:	91 1d       	adc	r25, r1
    11f2:	11 24       	eor	r1, r1
    11f4:	08 95       	ret

000011f6 <__udivmodsi4>:
    11f6:	a1 e2       	ldi	r26, 0x21	; 33
    11f8:	1a 2e       	mov	r1, r26
    11fa:	aa 1b       	sub	r26, r26
    11fc:	bb 1b       	sub	r27, r27
    11fe:	fd 01       	movw	r30, r26
    1200:	0d c0       	rjmp	.+26     	; 0x121c <__udivmodsi4_ep>

00001202 <__udivmodsi4_loop>:
    1202:	aa 1f       	adc	r26, r26
    1204:	bb 1f       	adc	r27, r27
    1206:	ee 1f       	adc	r30, r30
    1208:	ff 1f       	adc	r31, r31
    120a:	a2 17       	cp	r26, r18
    120c:	b3 07       	cpc	r27, r19
    120e:	e4 07       	cpc	r30, r20
    1210:	f5 07       	cpc	r31, r21
    1212:	20 f0       	brcs	.+8      	; 0x121c <__udivmodsi4_ep>
    1214:	a2 1b       	sub	r26, r18
    1216:	b3 0b       	sbc	r27, r19
    1218:	e4 0b       	sbc	r30, r20
    121a:	f5 0b       	sbc	r31, r21

0000121c <__udivmodsi4_ep>:
    121c:	66 1f       	adc	r22, r22
    121e:	77 1f       	adc	r23, r23
    1220:	88 1f       	adc	r24, r24
    1222:	99 1f       	adc	r25, r25
    1224:	1a 94       	dec	r1
    1226:	69 f7       	brne	.-38     	; 0x1202 <__udivmodsi4_loop>
    1228:	60 95       	com	r22
    122a:	70 95       	com	r23
    122c:	80 95       	com	r24
    122e:	90 95       	com	r25
    1230:	9b 01       	movw	r18, r22
    1232:	ac 01       	movw	r20, r24
    1234:	bd 01       	movw	r22, r26
    1236:	cf 01       	movw	r24, r30
    1238:	08 95       	ret

0000123a <__umulhisi3>:
    123a:	a2 9f       	mul	r26, r18
    123c:	b0 01       	movw	r22, r0
    123e:	b3 9f       	mul	r27, r19
    1240:	c0 01       	movw	r24, r0
    1242:	a3 9f       	mul	r26, r19
    1244:	70 0d       	add	r23, r0
    1246:	81 1d       	adc	r24, r1
    1248:	11 24       	eor	r1, r1
    124a:	91 1d       	adc	r25, r1
    124c:	b2 9f       	mul	r27, r18
    124e:	70 0d       	add	r23, r0
    1250:	81 1d       	adc	r24, r1
    1252:	11 24       	eor	r1, r1
    1254:	91 1d       	adc	r25, r1
    1256:	08 95       	ret

00001258 <eeprom_read_byte>:
    1258:	f9 99       	sbic	0x1f, 1	; 31
    125a:	fe cf       	rjmp	.-4      	; 0x1258 <eeprom_read_byte>
    125c:	92 bd       	out	0x22, r25	; 34
    125e:	81 bd       	out	0x21, r24	; 33
    1260:	f8 9a       	sbi	0x1f, 0	; 31
    1262:	99 27       	eor	r25, r25
    1264:	80 b5       	in	r24, 0x20	; 32
    1266:	08 95       	ret

00001268 <eeprom_write_byte>:
    1268:	26 2f       	mov	r18, r22

0000126a <eeprom_write_r18>:
    126a:	f9 99       	sbic	0x1f, 1	; 31
    126c:	fe cf       	rjmp	.-4      	; 0x126a <eeprom_write_r18>
    126e:	1f ba       	out	0x1f, r1	; 31
    1270:	92 bd       	out	0x22, r25	; 34
    1272:	81 bd       	out	0x21, r24	; 33
    1274:	20 bd       	out	0x20, r18	; 32
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	f8 94       	cli
    127a:	fa 9a       	sbi	0x1f, 2	; 31
    127c:	f9 9a       	sbi	0x1f, 1	; 31
    127e:	0f be       	out	0x3f, r0	; 63
    1280:	01 96       	adiw	r24, 0x01	; 1
    1282:	08 95       	ret

00001284 <_exit>:
    1284:	f8 94       	cli

00001286 <__stop_program>:
    1286:	ff cf       	rjmp	.-2      	; 0x1286 <__stop_program>
